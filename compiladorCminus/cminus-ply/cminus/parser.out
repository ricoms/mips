Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_seq
Rule 2     declaration_seq -> declaration declaration_seq
Rule 3     declaration_seq -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
Rule 6     declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
Rule 7     var_declaration -> type_specifier var_spec_seq SEMI
Rule 8     var_specifier -> ID
Rule 9     var_specifier -> ID ASSIGN literal
Rule 10    var_specifier -> ID LBRACKET NUM RBRACKET
Rule 11    var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET
Rule 12    type_specifier -> INT
Rule 13    type_specifier -> STRING
Rule 14    type_specifier -> BOOL
Rule 15    type_specifier -> VOID
Rule 16    param -> type_specifier ID
Rule 17    param -> type_specifier ID LBRACKET RBRACKET
Rule 18    compound_stmt -> var_declaration_list statement_list
Rule 19    statement -> if_stmt
Rule 20    statement -> while_stmt
Rule 21    statement -> for_stmt
Rule 22    statement -> break_stmt SEMI
Rule 23    statement -> return_stmt SEMI
Rule 24    statement -> read_stmt SEMI
Rule 25    statement -> write_stmt SEMI
Rule 26    statement -> assign SEMI
Rule 27    statement -> sub_call SEMI
Rule 28    if_stmt -> IF LPAREN expression RPAREN statement
Rule 29    if_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 30    if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE
Rule 31    if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
Rule 32    while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE
Rule 33    for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
Rule 34    break_stmt -> BREAK
Rule 35    read_stmt -> READ variable
Rule 36    write_stmt -> WRITE expression_list
Rule 37    return_stmt -> RETURN
Rule 38    return_stmt -> RETURN expression
Rule 39    sub_call -> ID LPAREN expression_list RPAREN
Rule 40    assign -> variable ASSIGN expression
Rule 41    assign -> variable PLUSASG expression
Rule 42    assign -> variable MINUSASG expression
Rule 43    assign -> variable TIMESASG expression
Rule 44    assign -> variable DIVASG expression
Rule 45    assign -> variable MODASG expression
Rule 46    variable -> ID
Rule 47    variable -> ID LBRACKET expression RBRACKET
Rule 48    expression -> expression PLUS expression
Rule 49    expression -> expression MINUS expression
Rule 50    expression -> expression TIMES expression
Rule 51    expression -> expression DIV expression
Rule 52    expression -> expression MOD expression
Rule 53    expression -> expression EQ expression
Rule 54    expression -> expression NEQ expression
Rule 55    expression -> expression NGT expression
Rule 56    expression -> expression NLT expression
Rule 57    expression -> expression GT expression
Rule 58    expression -> expression LT expression
Rule 59    expression -> expression AND expression
Rule 60    expression -> expression OR expression
Rule 61    expression -> NOT expression
Rule 62    expression -> SIGN expression
Rule 63    expression -> expression TERNARYIF expression TERNARYIFNOT expression
Rule 64    expression -> sub_call
Rule 65    expression -> variable
Rule 66    expression -> literal
Rule 67    expression -> LPAREN expression RPAREN
Rule 68    expression -> param
Rule 69    literal -> NUM
Rule 70    literal -> CHAIN
Rule 71    literal -> TRUE
Rule 72    literal -> FALSE
Rule 73    param_list -> param_seq
Rule 74    param_list -> VOID
Rule 75    param_list -> empty
Rule 76    param_seq -> param COMMA param_seq
Rule 77    param_seq -> param
Rule 78    var_declaration_list -> var_declaration var_declaration_list
Rule 79    var_declaration_list -> empty
Rule 80    var_spec_seq -> var_specifier COMMA var_spec_seq
Rule 81    var_spec_seq -> var_specifier
Rule 82    expression_list -> expression_seq
Rule 83    expression_list -> empty
Rule 84    literal_seq -> literal COMMA literal_seq
Rule 85    literal_seq -> literal
Rule 86    statement_list -> statement statement_list
Rule 87    statement_list -> empty
Rule 88    expression_seq -> expression COMMA expression_seq
Rule 89    expression_seq -> expression
Rule 90    empty -> <empty>

Terminals, with rules where they appear

AND                  : 59
ASSIGN               : 9 11 40
BOOL                 : 14
BREAK                : 34
CHAIN                : 70
COMMA                : 76 80 84 88
DIV                  : 51
DIVASG               : 44
ELSE                 : 29 31
EQ                   : 53
FALSE                : 72
FOR                  : 33
GT                   : 57
ID                   : 5 6 8 9 10 11 16 17 39 46 47
IF                   : 28 29 30 31
INT                  : 12
LBRACE               : 5 6 30 31 31 32 33
LBRACKET             : 10 11 11 17 47
LPAREN               : 5 6 28 29 30 31 32 33 39 67
LT                   : 58
MINUS                : 49
MINUSASG             : 42
MOD                  : 52
MODASG               : 45
NEQ                  : 54
NGT                  : 55
NLT                  : 56
NOT                  : 61
NUM                  : 10 11 69
OR                   : 60
PLUS                 : 48
PLUSASG              : 41
RBRACE               : 5 6 30 31 31 32 33
RBRACKET             : 10 11 11 17 47
READ                 : 35
RETURN               : 37 38
RPAREN               : 5 6 28 29 30 31 32 33 39 67
SEMI                 : 7 22 23 24 25 26 27 33 33
SIGN                 : 62
STRING               : 13
TERNARYIF            : 63
TERNARYIFNOT         : 63
TIMES                : 50
TIMESASG             : 43
TRUE                 : 71
VOID                 : 15 74
WHILE                : 32
WRITE                : 36
error                : 

Nonterminals, with rules where they appear

assign               : 26 33 33
break_stmt           : 22
compound_stmt        : 5 6 30 31 31 32 33
declaration          : 2 3
declaration_seq      : 1 2
empty                : 75 79 83 87
expression           : 28 29 30 31 32 33 38 40 41 42 43 44 45 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 62 63 63 63 67 88 89
expression_list      : 36 39
expression_seq       : 82 88
for_stmt             : 21
if_stmt              : 19
literal              : 9 66 84 85
literal_seq          : 11 84
param                : 68 76 77
param_list           : 5 6
param_seq            : 73 76
program              : 0
read_stmt            : 24
return_stmt          : 23
statement            : 28 29 29 86
statement_list       : 18 86
sub_call             : 27 64
type_specifier       : 6 7 16 17
var_declaration      : 4 78
var_declaration_list : 18 78
var_spec_seq         : 7 80
var_specifier        : 80 81
variable             : 35 40 41 42 43 44 45 65
while_stmt           : 20
write_stmt           : 25

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_seq
    (2) declaration_seq -> . declaration declaration_seq
    (3) declaration_seq -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
    (6) declaration -> . type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    ID              shift and go to state 5
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    program                        shift and go to state 1
    declaration_seq                shift and go to state 2
    declaration                    shift and go to state 3
    var_declaration                shift and go to state 4
    type_specifier                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_seq .

    $end            reduce using rule 1 (program -> declaration_seq .)


state 3

    (2) declaration_seq -> declaration . declaration_seq
    (3) declaration_seq -> declaration .
    (2) declaration_seq -> . declaration declaration_seq
    (3) declaration_seq -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
    (6) declaration -> . type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    $end            reduce using rule 3 (declaration_seq -> declaration .)
    ID              shift and go to state 5
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    declaration                    shift and go to state 3
    declaration_seq                shift and go to state 11
    var_declaration                shift and go to state 4
    type_specifier                 shift and go to state 6

state 4

    (4) declaration -> var_declaration .

    ID              reduce using rule 4 (declaration -> var_declaration .)
    INT             reduce using rule 4 (declaration -> var_declaration .)
    STRING          reduce using rule 4 (declaration -> var_declaration .)
    BOOL            reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 5

    (5) declaration -> ID . LPAREN param_list RPAREN LBRACE compound_stmt RBRACE

    LPAREN          shift and go to state 12


state 6

    (6) declaration -> type_specifier . ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
    (7) var_declaration -> type_specifier . var_spec_seq SEMI
    (80) var_spec_seq -> . var_specifier COMMA var_spec_seq
    (81) var_spec_seq -> . var_specifier
    (8) var_specifier -> . ID
    (9) var_specifier -> . ID ASSIGN literal
    (10) var_specifier -> . ID LBRACKET NUM RBRACKET
    (11) var_specifier -> . ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    ID              shift and go to state 13

    var_spec_seq                   shift and go to state 14
    var_specifier                  shift and go to state 15

state 7

    (12) type_specifier -> INT .

    ID              reduce using rule 12 (type_specifier -> INT .)


state 8

    (13) type_specifier -> STRING .

    ID              reduce using rule 13 (type_specifier -> STRING .)


state 9

    (14) type_specifier -> BOOL .

    ID              reduce using rule 14 (type_specifier -> BOOL .)


state 10

    (15) type_specifier -> VOID .

    ID              reduce using rule 15 (type_specifier -> VOID .)


state 11

    (2) declaration_seq -> declaration declaration_seq .

    $end            reduce using rule 2 (declaration_seq -> declaration declaration_seq .)


state 12

    (5) declaration -> ID LPAREN . param_list RPAREN LBRACE compound_stmt RBRACE
    (73) param_list -> . param_seq
    (74) param_list -> . VOID
    (75) param_list -> . empty
    (76) param_seq -> . param COMMA param_seq
    (77) param_seq -> . param
    (90) empty -> .
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    VOID            shift and go to state 18
    RPAREN          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9

    param_list                     shift and go to state 16
    param_seq                      shift and go to state 17
    empty                          shift and go to state 19
    param                          shift and go to state 20
    type_specifier                 shift and go to state 21

state 13

    (6) declaration -> type_specifier ID . LPAREN param_list RPAREN LBRACE compound_stmt RBRACE
    (8) var_specifier -> ID .
    (9) var_specifier -> ID . ASSIGN literal
    (10) var_specifier -> ID . LBRACKET NUM RBRACKET
    (11) var_specifier -> ID . LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    LPAREN          shift and go to state 22
    COMMA           reduce using rule 8 (var_specifier -> ID .)
    SEMI            reduce using rule 8 (var_specifier -> ID .)
    ASSIGN          shift and go to state 23
    LBRACKET        shift and go to state 24


state 14

    (7) var_declaration -> type_specifier var_spec_seq . SEMI

    SEMI            shift and go to state 25


state 15

    (80) var_spec_seq -> var_specifier . COMMA var_spec_seq
    (81) var_spec_seq -> var_specifier .

    COMMA           shift and go to state 26
    SEMI            reduce using rule 81 (var_spec_seq -> var_specifier .)


state 16

    (5) declaration -> ID LPAREN param_list . RPAREN LBRACE compound_stmt RBRACE

    RPAREN          shift and go to state 27


state 17

    (73) param_list -> param_seq .

    RPAREN          reduce using rule 73 (param_list -> param_seq .)


state 18

    (74) param_list -> VOID .
    (15) type_specifier -> VOID .

    RPAREN          reduce using rule 74 (param_list -> VOID .)
    ID              reduce using rule 15 (type_specifier -> VOID .)


state 19

    (75) param_list -> empty .

    RPAREN          reduce using rule 75 (param_list -> empty .)


state 20

    (76) param_seq -> param . COMMA param_seq
    (77) param_seq -> param .

    COMMA           shift and go to state 28
    RPAREN          reduce using rule 77 (param_seq -> param .)


state 21

    (16) param -> type_specifier . ID
    (17) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 29


state 22

    (6) declaration -> type_specifier ID LPAREN . param_list RPAREN LBRACE compound_stmt RBRACE
    (73) param_list -> . param_seq
    (74) param_list -> . VOID
    (75) param_list -> . empty
    (76) param_seq -> . param COMMA param_seq
    (77) param_seq -> . param
    (90) empty -> .
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    VOID            shift and go to state 18
    RPAREN          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9

    type_specifier                 shift and go to state 21
    param_list                     shift and go to state 30
    param_seq                      shift and go to state 17
    empty                          shift and go to state 19
    param                          shift and go to state 20

state 23

    (9) var_specifier -> ID ASSIGN . literal
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE

    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    literal                        shift and go to state 31

state 24

    (10) var_specifier -> ID LBRACKET . NUM RBRACKET
    (11) var_specifier -> ID LBRACKET . NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    NUM             shift and go to state 36


state 25

    (7) var_declaration -> type_specifier var_spec_seq SEMI .

    ID              reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    INT             reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    STRING          reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    BOOL            reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    VOID            reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    $end            reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    IF              reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    FOR             reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    BREAK           reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    READ            reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    WRITE           reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)
    RBRACE          reduce using rule 7 (var_declaration -> type_specifier var_spec_seq SEMI .)


state 26

    (80) var_spec_seq -> var_specifier COMMA . var_spec_seq
    (80) var_spec_seq -> . var_specifier COMMA var_spec_seq
    (81) var_spec_seq -> . var_specifier
    (8) var_specifier -> . ID
    (9) var_specifier -> . ID ASSIGN literal
    (10) var_specifier -> . ID LBRACKET NUM RBRACKET
    (11) var_specifier -> . ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    ID              shift and go to state 38

    var_specifier                  shift and go to state 15
    var_spec_seq                   shift and go to state 37

state 27

    (5) declaration -> ID LPAREN param_list RPAREN . LBRACE compound_stmt RBRACE

    LBRACE          shift and go to state 39


state 28

    (76) param_seq -> param COMMA . param_seq
    (76) param_seq -> . param COMMA param_seq
    (77) param_seq -> . param
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    param                          shift and go to state 20
    param_seq                      shift and go to state 40
    type_specifier                 shift and go to state 21

state 29

    (16) param -> type_specifier ID .
    (17) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 16 (param -> type_specifier ID .)
    RPAREN          reduce using rule 16 (param -> type_specifier ID .)
    PLUS            reduce using rule 16 (param -> type_specifier ID .)
    MINUS           reduce using rule 16 (param -> type_specifier ID .)
    TIMES           reduce using rule 16 (param -> type_specifier ID .)
    DIV             reduce using rule 16 (param -> type_specifier ID .)
    MOD             reduce using rule 16 (param -> type_specifier ID .)
    EQ              reduce using rule 16 (param -> type_specifier ID .)
    NEQ             reduce using rule 16 (param -> type_specifier ID .)
    NGT             reduce using rule 16 (param -> type_specifier ID .)
    NLT             reduce using rule 16 (param -> type_specifier ID .)
    GT              reduce using rule 16 (param -> type_specifier ID .)
    LT              reduce using rule 16 (param -> type_specifier ID .)
    AND             reduce using rule 16 (param -> type_specifier ID .)
    OR              reduce using rule 16 (param -> type_specifier ID .)
    TERNARYIF       reduce using rule 16 (param -> type_specifier ID .)
    SEMI            reduce using rule 16 (param -> type_specifier ID .)
    RBRACKET        reduce using rule 16 (param -> type_specifier ID .)
    TERNARYIFNOT    reduce using rule 16 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 41


state 30

    (6) declaration -> type_specifier ID LPAREN param_list . RPAREN LBRACE compound_stmt RBRACE

    RPAREN          shift and go to state 42


state 31

    (9) var_specifier -> ID ASSIGN literal .

    COMMA           reduce using rule 9 (var_specifier -> ID ASSIGN literal .)
    SEMI            reduce using rule 9 (var_specifier -> ID ASSIGN literal .)


state 32

    (69) literal -> NUM .

    COMMA           reduce using rule 69 (literal -> NUM .)
    SEMI            reduce using rule 69 (literal -> NUM .)
    PLUS            reduce using rule 69 (literal -> NUM .)
    MINUS           reduce using rule 69 (literal -> NUM .)
    TIMES           reduce using rule 69 (literal -> NUM .)
    DIV             reduce using rule 69 (literal -> NUM .)
    MOD             reduce using rule 69 (literal -> NUM .)
    EQ              reduce using rule 69 (literal -> NUM .)
    NEQ             reduce using rule 69 (literal -> NUM .)
    NGT             reduce using rule 69 (literal -> NUM .)
    NLT             reduce using rule 69 (literal -> NUM .)
    GT              reduce using rule 69 (literal -> NUM .)
    LT              reduce using rule 69 (literal -> NUM .)
    AND             reduce using rule 69 (literal -> NUM .)
    OR              reduce using rule 69 (literal -> NUM .)
    TERNARYIF       reduce using rule 69 (literal -> NUM .)
    RBRACKET        reduce using rule 69 (literal -> NUM .)
    RPAREN          reduce using rule 69 (literal -> NUM .)
    TERNARYIFNOT    reduce using rule 69 (literal -> NUM .)


state 33

    (70) literal -> CHAIN .

    COMMA           reduce using rule 70 (literal -> CHAIN .)
    SEMI            reduce using rule 70 (literal -> CHAIN .)
    PLUS            reduce using rule 70 (literal -> CHAIN .)
    MINUS           reduce using rule 70 (literal -> CHAIN .)
    TIMES           reduce using rule 70 (literal -> CHAIN .)
    DIV             reduce using rule 70 (literal -> CHAIN .)
    MOD             reduce using rule 70 (literal -> CHAIN .)
    EQ              reduce using rule 70 (literal -> CHAIN .)
    NEQ             reduce using rule 70 (literal -> CHAIN .)
    NGT             reduce using rule 70 (literal -> CHAIN .)
    NLT             reduce using rule 70 (literal -> CHAIN .)
    GT              reduce using rule 70 (literal -> CHAIN .)
    LT              reduce using rule 70 (literal -> CHAIN .)
    AND             reduce using rule 70 (literal -> CHAIN .)
    OR              reduce using rule 70 (literal -> CHAIN .)
    TERNARYIF       reduce using rule 70 (literal -> CHAIN .)
    RBRACKET        reduce using rule 70 (literal -> CHAIN .)
    RPAREN          reduce using rule 70 (literal -> CHAIN .)
    TERNARYIFNOT    reduce using rule 70 (literal -> CHAIN .)


state 34

    (71) literal -> TRUE .

    COMMA           reduce using rule 71 (literal -> TRUE .)
    SEMI            reduce using rule 71 (literal -> TRUE .)
    PLUS            reduce using rule 71 (literal -> TRUE .)
    MINUS           reduce using rule 71 (literal -> TRUE .)
    TIMES           reduce using rule 71 (literal -> TRUE .)
    DIV             reduce using rule 71 (literal -> TRUE .)
    MOD             reduce using rule 71 (literal -> TRUE .)
    EQ              reduce using rule 71 (literal -> TRUE .)
    NEQ             reduce using rule 71 (literal -> TRUE .)
    NGT             reduce using rule 71 (literal -> TRUE .)
    NLT             reduce using rule 71 (literal -> TRUE .)
    GT              reduce using rule 71 (literal -> TRUE .)
    LT              reduce using rule 71 (literal -> TRUE .)
    AND             reduce using rule 71 (literal -> TRUE .)
    OR              reduce using rule 71 (literal -> TRUE .)
    TERNARYIF       reduce using rule 71 (literal -> TRUE .)
    RBRACKET        reduce using rule 71 (literal -> TRUE .)
    RPAREN          reduce using rule 71 (literal -> TRUE .)
    TERNARYIFNOT    reduce using rule 71 (literal -> TRUE .)


state 35

    (72) literal -> FALSE .

    COMMA           reduce using rule 72 (literal -> FALSE .)
    SEMI            reduce using rule 72 (literal -> FALSE .)
    PLUS            reduce using rule 72 (literal -> FALSE .)
    MINUS           reduce using rule 72 (literal -> FALSE .)
    TIMES           reduce using rule 72 (literal -> FALSE .)
    DIV             reduce using rule 72 (literal -> FALSE .)
    MOD             reduce using rule 72 (literal -> FALSE .)
    EQ              reduce using rule 72 (literal -> FALSE .)
    NEQ             reduce using rule 72 (literal -> FALSE .)
    NGT             reduce using rule 72 (literal -> FALSE .)
    NLT             reduce using rule 72 (literal -> FALSE .)
    GT              reduce using rule 72 (literal -> FALSE .)
    LT              reduce using rule 72 (literal -> FALSE .)
    AND             reduce using rule 72 (literal -> FALSE .)
    OR              reduce using rule 72 (literal -> FALSE .)
    TERNARYIF       reduce using rule 72 (literal -> FALSE .)
    RBRACKET        reduce using rule 72 (literal -> FALSE .)
    RPAREN          reduce using rule 72 (literal -> FALSE .)
    TERNARYIFNOT    reduce using rule 72 (literal -> FALSE .)


state 36

    (10) var_specifier -> ID LBRACKET NUM . RBRACKET
    (11) var_specifier -> ID LBRACKET NUM . RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    RBRACKET        shift and go to state 43


state 37

    (80) var_spec_seq -> var_specifier COMMA var_spec_seq .

    SEMI            reduce using rule 80 (var_spec_seq -> var_specifier COMMA var_spec_seq .)


state 38

    (8) var_specifier -> ID .
    (9) var_specifier -> ID . ASSIGN literal
    (10) var_specifier -> ID . LBRACKET NUM RBRACKET
    (11) var_specifier -> ID . LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    COMMA           reduce using rule 8 (var_specifier -> ID .)
    SEMI            reduce using rule 8 (var_specifier -> ID .)
    ASSIGN          shift and go to state 23
    LBRACKET        shift and go to state 24


state 39

    (5) declaration -> ID LPAREN param_list RPAREN LBRACE . compound_stmt RBRACE
    (18) compound_stmt -> . var_declaration_list statement_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    compound_stmt                  shift and go to state 44
    var_declaration_list           shift and go to state 45
    var_declaration                shift and go to state 46
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48

state 40

    (76) param_seq -> param COMMA param_seq .

    RPAREN          reduce using rule 76 (param_seq -> param COMMA param_seq .)


state 41

    (17) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 49


state 42

    (6) declaration -> type_specifier ID LPAREN param_list RPAREN . LBRACE compound_stmt RBRACE

    LBRACE          shift and go to state 50


state 43

    (10) var_specifier -> ID LBRACKET NUM RBRACKET .
    (11) var_specifier -> ID LBRACKET NUM RBRACKET . ASSIGN LBRACKET literal_seq RBRACKET

    COMMA           reduce using rule 10 (var_specifier -> ID LBRACKET NUM RBRACKET .)
    SEMI            reduce using rule 10 (var_specifier -> ID LBRACKET NUM RBRACKET .)
    ASSIGN          shift and go to state 51


state 44

    (5) declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt . RBRACE

    RBRACE          shift and go to state 52


state 45

    (18) compound_stmt -> var_declaration_list . statement_list
    (86) statement_list -> . statement statement_list
    (87) statement_list -> . empty
    (19) statement -> . if_stmt
    (20) statement -> . while_stmt
    (21) statement -> . for_stmt
    (22) statement -> . break_stmt SEMI
    (23) statement -> . return_stmt SEMI
    (24) statement -> . read_stmt SEMI
    (25) statement -> . write_stmt SEMI
    (26) statement -> . assign SEMI
    (27) statement -> . sub_call SEMI
    (90) empty -> .
    (28) if_stmt -> . IF LPAREN expression RPAREN statement
    (29) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (32) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (33) for_stmt -> . FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (34) break_stmt -> . BREAK
    (37) return_stmt -> . RETURN
    (38) return_stmt -> . RETURN expression
    (35) read_stmt -> . READ variable
    (36) write_stmt -> . WRITE expression_list
    (40) assign -> . variable ASSIGN expression
    (41) assign -> . variable PLUSASG expression
    (42) assign -> . variable MINUSASG expression
    (43) assign -> . variable TIMESASG expression
    (44) assign -> . variable DIVASG expression
    (45) assign -> . variable MODASG expression
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    RBRACE          reduce using rule 90 (empty -> .)
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    BREAK           shift and go to state 68
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 72
    ID              shift and go to state 73

    statement_list                 shift and go to state 53
    statement                      shift and go to state 54
    empty                          shift and go to state 55
    if_stmt                        shift and go to state 56
    while_stmt                     shift and go to state 57
    for_stmt                       shift and go to state 58
    break_stmt                     shift and go to state 59
    return_stmt                    shift and go to state 60
    read_stmt                      shift and go to state 61
    write_stmt                     shift and go to state 62
    assign                         shift and go to state 63
    sub_call                       shift and go to state 64
    variable                       shift and go to state 71

state 46

    (78) var_declaration_list -> var_declaration . var_declaration_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    var_declaration                shift and go to state 46
    var_declaration_list           shift and go to state 74
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48

state 47

    (79) var_declaration_list -> empty .

    IF              reduce using rule 79 (var_declaration_list -> empty .)
    WHILE           reduce using rule 79 (var_declaration_list -> empty .)
    FOR             reduce using rule 79 (var_declaration_list -> empty .)
    BREAK           reduce using rule 79 (var_declaration_list -> empty .)
    RETURN          reduce using rule 79 (var_declaration_list -> empty .)
    READ            reduce using rule 79 (var_declaration_list -> empty .)
    WRITE           reduce using rule 79 (var_declaration_list -> empty .)
    ID              reduce using rule 79 (var_declaration_list -> empty .)
    RBRACE          reduce using rule 79 (var_declaration_list -> empty .)


state 48

    (7) var_declaration -> type_specifier . var_spec_seq SEMI
    (80) var_spec_seq -> . var_specifier COMMA var_spec_seq
    (81) var_spec_seq -> . var_specifier
    (8) var_specifier -> . ID
    (9) var_specifier -> . ID ASSIGN literal
    (10) var_specifier -> . ID LBRACKET NUM RBRACKET
    (11) var_specifier -> . ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET

    ID              shift and go to state 38

    var_spec_seq                   shift and go to state 14
    var_specifier                  shift and go to state 15

state 49

    (17) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    PLUS            reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    MINUS           reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    TIMES           reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    DIV             reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    MOD             reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    EQ              reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    NEQ             reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    NGT             reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    NLT             reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    GT              reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    LT              reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    AND             reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    OR              reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    TERNARYIF       reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    SEMI            reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    TERNARYIFNOT    reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)


state 50

    (6) declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE . compound_stmt RBRACE
    (18) compound_stmt -> . var_declaration_list statement_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    type_specifier                 shift and go to state 48
    compound_stmt                  shift and go to state 75
    var_declaration_list           shift and go to state 45
    var_declaration                shift and go to state 46
    empty                          shift and go to state 47

state 51

    (11) var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN . LBRACKET literal_seq RBRACKET

    LBRACKET        shift and go to state 76


state 52

    (5) declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .

    ID              reduce using rule 5 (declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    INT             reduce using rule 5 (declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    STRING          reduce using rule 5 (declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    BOOL            reduce using rule 5 (declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    VOID            reduce using rule 5 (declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    $end            reduce using rule 5 (declaration -> ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)


state 53

    (18) compound_stmt -> var_declaration_list statement_list .

    RBRACE          reduce using rule 18 (compound_stmt -> var_declaration_list statement_list .)


state 54

    (86) statement_list -> statement . statement_list
    (86) statement_list -> . statement statement_list
    (87) statement_list -> . empty
    (19) statement -> . if_stmt
    (20) statement -> . while_stmt
    (21) statement -> . for_stmt
    (22) statement -> . break_stmt SEMI
    (23) statement -> . return_stmt SEMI
    (24) statement -> . read_stmt SEMI
    (25) statement -> . write_stmt SEMI
    (26) statement -> . assign SEMI
    (27) statement -> . sub_call SEMI
    (90) empty -> .
    (28) if_stmt -> . IF LPAREN expression RPAREN statement
    (29) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (32) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (33) for_stmt -> . FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (34) break_stmt -> . BREAK
    (37) return_stmt -> . RETURN
    (38) return_stmt -> . RETURN expression
    (35) read_stmt -> . READ variable
    (36) write_stmt -> . WRITE expression_list
    (40) assign -> . variable ASSIGN expression
    (41) assign -> . variable PLUSASG expression
    (42) assign -> . variable MINUSASG expression
    (43) assign -> . variable TIMESASG expression
    (44) assign -> . variable DIVASG expression
    (45) assign -> . variable MODASG expression
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    RBRACE          reduce using rule 90 (empty -> .)
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    BREAK           shift and go to state 68
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 72
    ID              shift and go to state 73

    statement                      shift and go to state 54
    statement_list                 shift and go to state 77
    empty                          shift and go to state 55
    if_stmt                        shift and go to state 56
    while_stmt                     shift and go to state 57
    for_stmt                       shift and go to state 58
    break_stmt                     shift and go to state 59
    return_stmt                    shift and go to state 60
    read_stmt                      shift and go to state 61
    write_stmt                     shift and go to state 62
    assign                         shift and go to state 63
    sub_call                       shift and go to state 64
    variable                       shift and go to state 71

state 55

    (87) statement_list -> empty .

    RBRACE          reduce using rule 87 (statement_list -> empty .)


state 56

    (19) statement -> if_stmt .

    IF              reduce using rule 19 (statement -> if_stmt .)
    WHILE           reduce using rule 19 (statement -> if_stmt .)
    FOR             reduce using rule 19 (statement -> if_stmt .)
    BREAK           reduce using rule 19 (statement -> if_stmt .)
    RETURN          reduce using rule 19 (statement -> if_stmt .)
    READ            reduce using rule 19 (statement -> if_stmt .)
    WRITE           reduce using rule 19 (statement -> if_stmt .)
    ID              reduce using rule 19 (statement -> if_stmt .)
    RBRACE          reduce using rule 19 (statement -> if_stmt .)
    ELSE            reduce using rule 19 (statement -> if_stmt .)


state 57

    (20) statement -> while_stmt .

    IF              reduce using rule 20 (statement -> while_stmt .)
    WHILE           reduce using rule 20 (statement -> while_stmt .)
    FOR             reduce using rule 20 (statement -> while_stmt .)
    BREAK           reduce using rule 20 (statement -> while_stmt .)
    RETURN          reduce using rule 20 (statement -> while_stmt .)
    READ            reduce using rule 20 (statement -> while_stmt .)
    WRITE           reduce using rule 20 (statement -> while_stmt .)
    ID              reduce using rule 20 (statement -> while_stmt .)
    RBRACE          reduce using rule 20 (statement -> while_stmt .)
    ELSE            reduce using rule 20 (statement -> while_stmt .)


state 58

    (21) statement -> for_stmt .

    IF              reduce using rule 21 (statement -> for_stmt .)
    WHILE           reduce using rule 21 (statement -> for_stmt .)
    FOR             reduce using rule 21 (statement -> for_stmt .)
    BREAK           reduce using rule 21 (statement -> for_stmt .)
    RETURN          reduce using rule 21 (statement -> for_stmt .)
    READ            reduce using rule 21 (statement -> for_stmt .)
    WRITE           reduce using rule 21 (statement -> for_stmt .)
    ID              reduce using rule 21 (statement -> for_stmt .)
    RBRACE          reduce using rule 21 (statement -> for_stmt .)
    ELSE            reduce using rule 21 (statement -> for_stmt .)


state 59

    (22) statement -> break_stmt . SEMI

    SEMI            shift and go to state 78


state 60

    (23) statement -> return_stmt . SEMI

    SEMI            shift and go to state 79


state 61

    (24) statement -> read_stmt . SEMI

    SEMI            shift and go to state 80


state 62

    (25) statement -> write_stmt . SEMI

    SEMI            shift and go to state 81


state 63

    (26) statement -> assign . SEMI

    SEMI            shift and go to state 82


state 64

    (27) statement -> sub_call . SEMI

    SEMI            shift and go to state 83


state 65

    (28) if_stmt -> IF . LPAREN expression RPAREN statement
    (29) if_stmt -> IF . LPAREN expression RPAREN statement ELSE statement
    (30) if_stmt -> IF . LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> IF . LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE

    LPAREN          shift and go to state 84


state 66

    (32) while_stmt -> WHILE . LPAREN expression RPAREN LBRACE compound_stmt RBRACE

    LPAREN          shift and go to state 85


state 67

    (33) for_stmt -> FOR . LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE

    LPAREN          shift and go to state 86


state 68

    (34) break_stmt -> BREAK .

    SEMI            reduce using rule 34 (break_stmt -> BREAK .)


state 69

    (37) return_stmt -> RETURN .
    (38) return_stmt -> RETURN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    SEMI            reduce using rule 37 (return_stmt -> RETURN .)
    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 87
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 70

    (35) read_stmt -> READ . variable
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 96

    variable                       shift and go to state 95

state 71

    (40) assign -> variable . ASSIGN expression
    (41) assign -> variable . PLUSASG expression
    (42) assign -> variable . MINUSASG expression
    (43) assign -> variable . TIMESASG expression
    (44) assign -> variable . DIVASG expression
    (45) assign -> variable . MODASG expression

    ASSIGN          shift and go to state 97
    PLUSASG         shift and go to state 98
    MINUSASG        shift and go to state 99
    TIMESASG        shift and go to state 100
    DIVASG          shift and go to state 101
    MODASG          shift and go to state 102


state 72

    (36) write_stmt -> WRITE . expression_list
    (82) expression_list -> . expression_seq
    (83) expression_list -> . empty
    (88) expression_seq -> . expression COMMA expression_seq
    (89) expression_seq -> . expression
    (90) empty -> .
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    SEMI            reduce using rule 90 (empty -> .)
    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression_list                shift and go to state 103
    expression_seq                 shift and go to state 104
    empty                          shift and go to state 105
    expression                     shift and go to state 106
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 73

    (39) sub_call -> ID . LPAREN expression_list RPAREN
    (46) variable -> ID .
    (47) variable -> ID . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 107
    ASSIGN          reduce using rule 46 (variable -> ID .)
    PLUSASG         reduce using rule 46 (variable -> ID .)
    MINUSASG        reduce using rule 46 (variable -> ID .)
    TIMESASG        reduce using rule 46 (variable -> ID .)
    DIVASG          reduce using rule 46 (variable -> ID .)
    MODASG          reduce using rule 46 (variable -> ID .)
    PLUS            reduce using rule 46 (variable -> ID .)
    MINUS           reduce using rule 46 (variable -> ID .)
    TIMES           reduce using rule 46 (variable -> ID .)
    DIV             reduce using rule 46 (variable -> ID .)
    MOD             reduce using rule 46 (variable -> ID .)
    EQ              reduce using rule 46 (variable -> ID .)
    NEQ             reduce using rule 46 (variable -> ID .)
    NGT             reduce using rule 46 (variable -> ID .)
    NLT             reduce using rule 46 (variable -> ID .)
    GT              reduce using rule 46 (variable -> ID .)
    LT              reduce using rule 46 (variable -> ID .)
    AND             reduce using rule 46 (variable -> ID .)
    OR              reduce using rule 46 (variable -> ID .)
    TERNARYIF       reduce using rule 46 (variable -> ID .)
    SEMI            reduce using rule 46 (variable -> ID .)
    COMMA           reduce using rule 46 (variable -> ID .)
    RPAREN          reduce using rule 46 (variable -> ID .)
    RBRACKET        reduce using rule 46 (variable -> ID .)
    TERNARYIFNOT    reduce using rule 46 (variable -> ID .)
    LBRACKET        shift and go to state 108


state 74

    (78) var_declaration_list -> var_declaration var_declaration_list .

    IF              reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    WHILE           reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    FOR             reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    BREAK           reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    RETURN          reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    READ            reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    WRITE           reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    ID              reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)
    RBRACE          reduce using rule 78 (var_declaration_list -> var_declaration var_declaration_list .)


state 75

    (6) declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt . RBRACE

    RBRACE          shift and go to state 109


state 76

    (11) var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN LBRACKET . literal_seq RBRACKET
    (84) literal_seq -> . literal COMMA literal_seq
    (85) literal_seq -> . literal
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE

    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    literal_seq                    shift and go to state 110
    literal                        shift and go to state 111

state 77

    (86) statement_list -> statement statement_list .

    RBRACE          reduce using rule 86 (statement_list -> statement statement_list .)


state 78

    (22) statement -> break_stmt SEMI .

    IF              reduce using rule 22 (statement -> break_stmt SEMI .)
    WHILE           reduce using rule 22 (statement -> break_stmt SEMI .)
    FOR             reduce using rule 22 (statement -> break_stmt SEMI .)
    BREAK           reduce using rule 22 (statement -> break_stmt SEMI .)
    RETURN          reduce using rule 22 (statement -> break_stmt SEMI .)
    READ            reduce using rule 22 (statement -> break_stmt SEMI .)
    WRITE           reduce using rule 22 (statement -> break_stmt SEMI .)
    ID              reduce using rule 22 (statement -> break_stmt SEMI .)
    RBRACE          reduce using rule 22 (statement -> break_stmt SEMI .)
    ELSE            reduce using rule 22 (statement -> break_stmt SEMI .)


state 79

    (23) statement -> return_stmt SEMI .

    IF              reduce using rule 23 (statement -> return_stmt SEMI .)
    WHILE           reduce using rule 23 (statement -> return_stmt SEMI .)
    FOR             reduce using rule 23 (statement -> return_stmt SEMI .)
    BREAK           reduce using rule 23 (statement -> return_stmt SEMI .)
    RETURN          reduce using rule 23 (statement -> return_stmt SEMI .)
    READ            reduce using rule 23 (statement -> return_stmt SEMI .)
    WRITE           reduce using rule 23 (statement -> return_stmt SEMI .)
    ID              reduce using rule 23 (statement -> return_stmt SEMI .)
    RBRACE          reduce using rule 23 (statement -> return_stmt SEMI .)
    ELSE            reduce using rule 23 (statement -> return_stmt SEMI .)


state 80

    (24) statement -> read_stmt SEMI .

    IF              reduce using rule 24 (statement -> read_stmt SEMI .)
    WHILE           reduce using rule 24 (statement -> read_stmt SEMI .)
    FOR             reduce using rule 24 (statement -> read_stmt SEMI .)
    BREAK           reduce using rule 24 (statement -> read_stmt SEMI .)
    RETURN          reduce using rule 24 (statement -> read_stmt SEMI .)
    READ            reduce using rule 24 (statement -> read_stmt SEMI .)
    WRITE           reduce using rule 24 (statement -> read_stmt SEMI .)
    ID              reduce using rule 24 (statement -> read_stmt SEMI .)
    RBRACE          reduce using rule 24 (statement -> read_stmt SEMI .)
    ELSE            reduce using rule 24 (statement -> read_stmt SEMI .)


state 81

    (25) statement -> write_stmt SEMI .

    IF              reduce using rule 25 (statement -> write_stmt SEMI .)
    WHILE           reduce using rule 25 (statement -> write_stmt SEMI .)
    FOR             reduce using rule 25 (statement -> write_stmt SEMI .)
    BREAK           reduce using rule 25 (statement -> write_stmt SEMI .)
    RETURN          reduce using rule 25 (statement -> write_stmt SEMI .)
    READ            reduce using rule 25 (statement -> write_stmt SEMI .)
    WRITE           reduce using rule 25 (statement -> write_stmt SEMI .)
    ID              reduce using rule 25 (statement -> write_stmt SEMI .)
    RBRACE          reduce using rule 25 (statement -> write_stmt SEMI .)
    ELSE            reduce using rule 25 (statement -> write_stmt SEMI .)


state 82

    (26) statement -> assign SEMI .

    IF              reduce using rule 26 (statement -> assign SEMI .)
    WHILE           reduce using rule 26 (statement -> assign SEMI .)
    FOR             reduce using rule 26 (statement -> assign SEMI .)
    BREAK           reduce using rule 26 (statement -> assign SEMI .)
    RETURN          reduce using rule 26 (statement -> assign SEMI .)
    READ            reduce using rule 26 (statement -> assign SEMI .)
    WRITE           reduce using rule 26 (statement -> assign SEMI .)
    ID              reduce using rule 26 (statement -> assign SEMI .)
    RBRACE          reduce using rule 26 (statement -> assign SEMI .)
    ELSE            reduce using rule 26 (statement -> assign SEMI .)


state 83

    (27) statement -> sub_call SEMI .

    IF              reduce using rule 27 (statement -> sub_call SEMI .)
    WHILE           reduce using rule 27 (statement -> sub_call SEMI .)
    FOR             reduce using rule 27 (statement -> sub_call SEMI .)
    BREAK           reduce using rule 27 (statement -> sub_call SEMI .)
    RETURN          reduce using rule 27 (statement -> sub_call SEMI .)
    READ            reduce using rule 27 (statement -> sub_call SEMI .)
    WRITE           reduce using rule 27 (statement -> sub_call SEMI .)
    ID              reduce using rule 27 (statement -> sub_call SEMI .)
    RBRACE          reduce using rule 27 (statement -> sub_call SEMI .)
    ELSE            reduce using rule 27 (statement -> sub_call SEMI .)


state 84

    (28) if_stmt -> IF LPAREN . expression RPAREN statement
    (29) if_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (30) if_stmt -> IF LPAREN . expression RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> IF LPAREN . expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 112
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 85

    (32) while_stmt -> WHILE LPAREN . expression RPAREN LBRACE compound_stmt RBRACE
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 113
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 86

    (33) for_stmt -> FOR LPAREN . assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (40) assign -> . variable ASSIGN expression
    (41) assign -> . variable PLUSASG expression
    (42) assign -> . variable MINUSASG expression
    (43) assign -> . variable TIMESASG expression
    (44) assign -> . variable DIVASG expression
    (45) assign -> . variable MODASG expression
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 96

    assign                         shift and go to state 114
    variable                       shift and go to state 71

state 87

    (38) return_stmt -> RETURN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 38 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 88

    (61) expression -> NOT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 129
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 89

    (62) expression -> SIGN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 130
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 90

    (64) expression -> sub_call .

    PLUS            reduce using rule 64 (expression -> sub_call .)
    MINUS           reduce using rule 64 (expression -> sub_call .)
    TIMES           reduce using rule 64 (expression -> sub_call .)
    DIV             reduce using rule 64 (expression -> sub_call .)
    MOD             reduce using rule 64 (expression -> sub_call .)
    EQ              reduce using rule 64 (expression -> sub_call .)
    NEQ             reduce using rule 64 (expression -> sub_call .)
    NGT             reduce using rule 64 (expression -> sub_call .)
    NLT             reduce using rule 64 (expression -> sub_call .)
    GT              reduce using rule 64 (expression -> sub_call .)
    LT              reduce using rule 64 (expression -> sub_call .)
    AND             reduce using rule 64 (expression -> sub_call .)
    OR              reduce using rule 64 (expression -> sub_call .)
    TERNARYIF       reduce using rule 64 (expression -> sub_call .)
    SEMI            reduce using rule 64 (expression -> sub_call .)
    COMMA           reduce using rule 64 (expression -> sub_call .)
    RPAREN          reduce using rule 64 (expression -> sub_call .)
    RBRACKET        reduce using rule 64 (expression -> sub_call .)
    TERNARYIFNOT    reduce using rule 64 (expression -> sub_call .)


state 91

    (65) expression -> variable .

    PLUS            reduce using rule 65 (expression -> variable .)
    MINUS           reduce using rule 65 (expression -> variable .)
    TIMES           reduce using rule 65 (expression -> variable .)
    DIV             reduce using rule 65 (expression -> variable .)
    MOD             reduce using rule 65 (expression -> variable .)
    EQ              reduce using rule 65 (expression -> variable .)
    NEQ             reduce using rule 65 (expression -> variable .)
    NGT             reduce using rule 65 (expression -> variable .)
    NLT             reduce using rule 65 (expression -> variable .)
    GT              reduce using rule 65 (expression -> variable .)
    LT              reduce using rule 65 (expression -> variable .)
    AND             reduce using rule 65 (expression -> variable .)
    OR              reduce using rule 65 (expression -> variable .)
    TERNARYIF       reduce using rule 65 (expression -> variable .)
    SEMI            reduce using rule 65 (expression -> variable .)
    COMMA           reduce using rule 65 (expression -> variable .)
    RPAREN          reduce using rule 65 (expression -> variable .)
    RBRACKET        reduce using rule 65 (expression -> variable .)
    TERNARYIFNOT    reduce using rule 65 (expression -> variable .)


state 92

    (66) expression -> literal .

    PLUS            reduce using rule 66 (expression -> literal .)
    MINUS           reduce using rule 66 (expression -> literal .)
    TIMES           reduce using rule 66 (expression -> literal .)
    DIV             reduce using rule 66 (expression -> literal .)
    MOD             reduce using rule 66 (expression -> literal .)
    EQ              reduce using rule 66 (expression -> literal .)
    NEQ             reduce using rule 66 (expression -> literal .)
    NGT             reduce using rule 66 (expression -> literal .)
    NLT             reduce using rule 66 (expression -> literal .)
    GT              reduce using rule 66 (expression -> literal .)
    LT              reduce using rule 66 (expression -> literal .)
    AND             reduce using rule 66 (expression -> literal .)
    OR              reduce using rule 66 (expression -> literal .)
    TERNARYIF       reduce using rule 66 (expression -> literal .)
    SEMI            reduce using rule 66 (expression -> literal .)
    COMMA           reduce using rule 66 (expression -> literal .)
    RPAREN          reduce using rule 66 (expression -> literal .)
    RBRACKET        reduce using rule 66 (expression -> literal .)
    TERNARYIFNOT    reduce using rule 66 (expression -> literal .)


state 93

    (67) expression -> LPAREN . expression RPAREN
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 131
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 94

    (68) expression -> param .

    PLUS            reduce using rule 68 (expression -> param .)
    MINUS           reduce using rule 68 (expression -> param .)
    TIMES           reduce using rule 68 (expression -> param .)
    DIV             reduce using rule 68 (expression -> param .)
    MOD             reduce using rule 68 (expression -> param .)
    EQ              reduce using rule 68 (expression -> param .)
    NEQ             reduce using rule 68 (expression -> param .)
    NGT             reduce using rule 68 (expression -> param .)
    NLT             reduce using rule 68 (expression -> param .)
    GT              reduce using rule 68 (expression -> param .)
    LT              reduce using rule 68 (expression -> param .)
    AND             reduce using rule 68 (expression -> param .)
    OR              reduce using rule 68 (expression -> param .)
    TERNARYIF       reduce using rule 68 (expression -> param .)
    SEMI            reduce using rule 68 (expression -> param .)
    COMMA           reduce using rule 68 (expression -> param .)
    RPAREN          reduce using rule 68 (expression -> param .)
    RBRACKET        reduce using rule 68 (expression -> param .)
    TERNARYIFNOT    reduce using rule 68 (expression -> param .)


state 95

    (35) read_stmt -> READ variable .

    SEMI            reduce using rule 35 (read_stmt -> READ variable .)


state 96

    (46) variable -> ID .
    (47) variable -> ID . LBRACKET expression RBRACKET

    SEMI            reduce using rule 46 (variable -> ID .)
    ASSIGN          reduce using rule 46 (variable -> ID .)
    PLUSASG         reduce using rule 46 (variable -> ID .)
    MINUSASG        reduce using rule 46 (variable -> ID .)
    TIMESASG        reduce using rule 46 (variable -> ID .)
    DIVASG          reduce using rule 46 (variable -> ID .)
    MODASG          reduce using rule 46 (variable -> ID .)
    LBRACKET        shift and go to state 108


state 97

    (40) assign -> variable ASSIGN . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    variable                       shift and go to state 91
    expression                     shift and go to state 132
    sub_call                       shift and go to state 90
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 98

    (41) assign -> variable PLUSASG . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    variable                       shift and go to state 91
    expression                     shift and go to state 133
    sub_call                       shift and go to state 90
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 99

    (42) assign -> variable MINUSASG . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    variable                       shift and go to state 91
    expression                     shift and go to state 134
    sub_call                       shift and go to state 90
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 100

    (43) assign -> variable TIMESASG . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    variable                       shift and go to state 91
    expression                     shift and go to state 135
    sub_call                       shift and go to state 90
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 101

    (44) assign -> variable DIVASG . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    variable                       shift and go to state 91
    expression                     shift and go to state 136
    sub_call                       shift and go to state 90
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 102

    (45) assign -> variable MODASG . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    variable                       shift and go to state 91
    expression                     shift and go to state 137
    sub_call                       shift and go to state 90
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 103

    (36) write_stmt -> WRITE expression_list .

    SEMI            reduce using rule 36 (write_stmt -> WRITE expression_list .)


state 104

    (82) expression_list -> expression_seq .

    SEMI            reduce using rule 82 (expression_list -> expression_seq .)
    RPAREN          reduce using rule 82 (expression_list -> expression_seq .)


state 105

    (83) expression_list -> empty .

    SEMI            reduce using rule 83 (expression_list -> empty .)
    RPAREN          reduce using rule 83 (expression_list -> empty .)


state 106

    (88) expression_seq -> expression . COMMA expression_seq
    (89) expression_seq -> expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    COMMA           shift and go to state 138
    SEMI            reduce using rule 89 (expression_seq -> expression .)
    RPAREN          reduce using rule 89 (expression_seq -> expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 107

    (39) sub_call -> ID LPAREN . expression_list RPAREN
    (82) expression_list -> . expression_seq
    (83) expression_list -> . empty
    (88) expression_seq -> . expression COMMA expression_seq
    (89) expression_seq -> . expression
    (90) empty -> .
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    RPAREN          reduce using rule 90 (empty -> .)
    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression_list                shift and go to state 139
    expression_seq                 shift and go to state 104
    empty                          shift and go to state 105
    expression                     shift and go to state 106
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 108

    (47) variable -> ID LBRACKET . expression RBRACKET
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 140
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 109

    (6) declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .

    ID              reduce using rule 6 (declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    INT             reduce using rule 6 (declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    STRING          reduce using rule 6 (declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    BOOL            reduce using rule 6 (declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    VOID            reduce using rule 6 (declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)
    $end            reduce using rule 6 (declaration -> type_specifier ID LPAREN param_list RPAREN LBRACE compound_stmt RBRACE .)


state 110

    (11) var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq . RBRACKET

    RBRACKET        shift and go to state 141


state 111

    (84) literal_seq -> literal . COMMA literal_seq
    (85) literal_seq -> literal .

    COMMA           shift and go to state 142
    RBRACKET        reduce using rule 85 (literal_seq -> literal .)


state 112

    (28) if_stmt -> IF LPAREN expression . RPAREN statement
    (29) if_stmt -> IF LPAREN expression . RPAREN statement ELSE statement
    (30) if_stmt -> IF LPAREN expression . RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> IF LPAREN expression . RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    RPAREN          shift and go to state 143
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 113

    (32) while_stmt -> WHILE LPAREN expression . RPAREN LBRACE compound_stmt RBRACE
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    RPAREN          shift and go to state 144
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 114

    (33) for_stmt -> FOR LPAREN assign . SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE

    SEMI            shift and go to state 145


state 115

    (48) expression -> expression PLUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 146
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 116

    (49) expression -> expression MINUS . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 147
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 117

    (50) expression -> expression TIMES . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 148
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 118

    (51) expression -> expression DIV . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 149
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 119

    (52) expression -> expression MOD . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 150
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 120

    (53) expression -> expression EQ . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 151
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 121

    (54) expression -> expression NEQ . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 152
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 122

    (55) expression -> expression NGT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 153
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 123

    (56) expression -> expression NLT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 154
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 124

    (57) expression -> expression GT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 155
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 125

    (58) expression -> expression LT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 156
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 126

    (59) expression -> expression AND . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 157
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 127

    (60) expression -> expression OR . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 158
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 128

    (63) expression -> expression TERNARYIF . expression TERNARYIFNOT expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 159
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 129

    (61) expression -> NOT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    PLUS            reduce using rule 61 (expression -> NOT expression .)
    MINUS           reduce using rule 61 (expression -> NOT expression .)
    TIMES           reduce using rule 61 (expression -> NOT expression .)
    DIV             reduce using rule 61 (expression -> NOT expression .)
    MOD             reduce using rule 61 (expression -> NOT expression .)
    EQ              reduce using rule 61 (expression -> NOT expression .)
    NEQ             reduce using rule 61 (expression -> NOT expression .)
    NGT             reduce using rule 61 (expression -> NOT expression .)
    NLT             reduce using rule 61 (expression -> NOT expression .)
    GT              reduce using rule 61 (expression -> NOT expression .)
    LT              reduce using rule 61 (expression -> NOT expression .)
    AND             reduce using rule 61 (expression -> NOT expression .)
    OR              reduce using rule 61 (expression -> NOT expression .)
    TERNARYIF       reduce using rule 61 (expression -> NOT expression .)
    SEMI            reduce using rule 61 (expression -> NOT expression .)
    COMMA           reduce using rule 61 (expression -> NOT expression .)
    RPAREN          reduce using rule 61 (expression -> NOT expression .)
    RBRACKET        reduce using rule 61 (expression -> NOT expression .)
    TERNARYIFNOT    reduce using rule 61 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 116 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIV             [ shift and go to state 118 ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 130

    (62) expression -> SIGN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    PLUS            reduce using rule 62 (expression -> SIGN expression .)
    MINUS           reduce using rule 62 (expression -> SIGN expression .)
    TIMES           reduce using rule 62 (expression -> SIGN expression .)
    DIV             reduce using rule 62 (expression -> SIGN expression .)
    MOD             reduce using rule 62 (expression -> SIGN expression .)
    EQ              reduce using rule 62 (expression -> SIGN expression .)
    NEQ             reduce using rule 62 (expression -> SIGN expression .)
    NGT             reduce using rule 62 (expression -> SIGN expression .)
    NLT             reduce using rule 62 (expression -> SIGN expression .)
    GT              reduce using rule 62 (expression -> SIGN expression .)
    LT              reduce using rule 62 (expression -> SIGN expression .)
    AND             reduce using rule 62 (expression -> SIGN expression .)
    OR              reduce using rule 62 (expression -> SIGN expression .)
    TERNARYIF       reduce using rule 62 (expression -> SIGN expression .)
    SEMI            reduce using rule 62 (expression -> SIGN expression .)
    COMMA           reduce using rule 62 (expression -> SIGN expression .)
    RPAREN          reduce using rule 62 (expression -> SIGN expression .)
    RBRACKET        reduce using rule 62 (expression -> SIGN expression .)
    TERNARYIFNOT    reduce using rule 62 (expression -> SIGN expression .)

  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 116 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIV             [ shift and go to state 118 ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 131

    (67) expression -> LPAREN expression . RPAREN
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    RPAREN          shift and go to state 160
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 132

    (40) assign -> variable ASSIGN expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 40 (assign -> variable ASSIGN expression .)
    RPAREN          reduce using rule 40 (assign -> variable ASSIGN expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 133

    (41) assign -> variable PLUSASG expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 41 (assign -> variable PLUSASG expression .)
    RPAREN          reduce using rule 41 (assign -> variable PLUSASG expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 134

    (42) assign -> variable MINUSASG expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 42 (assign -> variable MINUSASG expression .)
    RPAREN          reduce using rule 42 (assign -> variable MINUSASG expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 135

    (43) assign -> variable TIMESASG expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 43 (assign -> variable TIMESASG expression .)
    RPAREN          reduce using rule 43 (assign -> variable TIMESASG expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 136

    (44) assign -> variable DIVASG expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 44 (assign -> variable DIVASG expression .)
    RPAREN          reduce using rule 44 (assign -> variable DIVASG expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 137

    (45) assign -> variable MODASG expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            reduce using rule 45 (assign -> variable MODASG expression .)
    RPAREN          reduce using rule 45 (assign -> variable MODASG expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 138

    (88) expression_seq -> expression COMMA . expression_seq
    (88) expression_seq -> . expression COMMA expression_seq
    (89) expression_seq -> . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 106
    expression_seq                 shift and go to state 161
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 139

    (39) sub_call -> ID LPAREN expression_list . RPAREN

    RPAREN          shift and go to state 162


state 140

    (47) variable -> ID LBRACKET expression . RBRACKET
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    RBRACKET        shift and go to state 163
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 141

    (11) var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET .

    COMMA           reduce using rule 11 (var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET .)
    SEMI            reduce using rule 11 (var_specifier -> ID LBRACKET NUM RBRACKET ASSIGN LBRACKET literal_seq RBRACKET .)


state 142

    (84) literal_seq -> literal COMMA . literal_seq
    (84) literal_seq -> . literal COMMA literal_seq
    (85) literal_seq -> . literal
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE

    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35

    literal                        shift and go to state 111
    literal_seq                    shift and go to state 164

state 143

    (28) if_stmt -> IF LPAREN expression RPAREN . statement
    (29) if_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (30) if_stmt -> IF LPAREN expression RPAREN . LBRACE compound_stmt RBRACE
    (31) if_stmt -> IF LPAREN expression RPAREN . LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (19) statement -> . if_stmt
    (20) statement -> . while_stmt
    (21) statement -> . for_stmt
    (22) statement -> . break_stmt SEMI
    (23) statement -> . return_stmt SEMI
    (24) statement -> . read_stmt SEMI
    (25) statement -> . write_stmt SEMI
    (26) statement -> . assign SEMI
    (27) statement -> . sub_call SEMI
    (28) if_stmt -> . IF LPAREN expression RPAREN statement
    (29) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (32) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (33) for_stmt -> . FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (34) break_stmt -> . BREAK
    (37) return_stmt -> . RETURN
    (38) return_stmt -> . RETURN expression
    (35) read_stmt -> . READ variable
    (36) write_stmt -> . WRITE expression_list
    (40) assign -> . variable ASSIGN expression
    (41) assign -> . variable PLUSASG expression
    (42) assign -> . variable MINUSASG expression
    (43) assign -> . variable TIMESASG expression
    (44) assign -> . variable DIVASG expression
    (45) assign -> . variable MODASG expression
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    LBRACE          shift and go to state 166
    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    BREAK           shift and go to state 68
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 72
    ID              shift and go to state 73

    statement                      shift and go to state 165
    if_stmt                        shift and go to state 56
    while_stmt                     shift and go to state 57
    for_stmt                       shift and go to state 58
    break_stmt                     shift and go to state 59
    return_stmt                    shift and go to state 60
    read_stmt                      shift and go to state 61
    write_stmt                     shift and go to state 62
    assign                         shift and go to state 63
    sub_call                       shift and go to state 64
    variable                       shift and go to state 71

state 144

    (32) while_stmt -> WHILE LPAREN expression RPAREN . LBRACE compound_stmt RBRACE

    LBRACE          shift and go to state 167


state 145

    (33) for_stmt -> FOR LPAREN assign SEMI . expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 168
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 146

    (48) expression -> expression PLUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    PLUS            reduce using rule 48 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 48 (expression -> expression PLUS expression .)
    MOD             reduce using rule 48 (expression -> expression PLUS expression .)
    EQ              reduce using rule 48 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 48 (expression -> expression PLUS expression .)
    NGT             reduce using rule 48 (expression -> expression PLUS expression .)
    NLT             reduce using rule 48 (expression -> expression PLUS expression .)
    GT              reduce using rule 48 (expression -> expression PLUS expression .)
    LT              reduce using rule 48 (expression -> expression PLUS expression .)
    AND             reduce using rule 48 (expression -> expression PLUS expression .)
    OR              reduce using rule 48 (expression -> expression PLUS expression .)
    TERNARYIF       reduce using rule 48 (expression -> expression PLUS expression .)
    SEMI            reduce using rule 48 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 48 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 48 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 48 (expression -> expression PLUS expression .)
    TERNARYIFNOT    reduce using rule 48 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 117
    DIV             shift and go to state 118

  ! TIMES           [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 48 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 116 ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 147

    (49) expression -> expression MINUS expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    PLUS            reduce using rule 49 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 49 (expression -> expression MINUS expression .)
    MOD             reduce using rule 49 (expression -> expression MINUS expression .)
    EQ              reduce using rule 49 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 49 (expression -> expression MINUS expression .)
    NGT             reduce using rule 49 (expression -> expression MINUS expression .)
    NLT             reduce using rule 49 (expression -> expression MINUS expression .)
    GT              reduce using rule 49 (expression -> expression MINUS expression .)
    LT              reduce using rule 49 (expression -> expression MINUS expression .)
    AND             reduce using rule 49 (expression -> expression MINUS expression .)
    OR              reduce using rule 49 (expression -> expression MINUS expression .)
    TERNARYIF       reduce using rule 49 (expression -> expression MINUS expression .)
    SEMI            reduce using rule 49 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 49 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 49 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 49 (expression -> expression MINUS expression .)
    TERNARYIFNOT    reduce using rule 49 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 117
    DIV             shift and go to state 118

  ! TIMES           [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 49 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 116 ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 148

    (50) expression -> expression TIMES expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    PLUS            reduce using rule 50 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 50 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 50 (expression -> expression TIMES expression .)
    DIV             reduce using rule 50 (expression -> expression TIMES expression .)
    MOD             reduce using rule 50 (expression -> expression TIMES expression .)
    EQ              reduce using rule 50 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 50 (expression -> expression TIMES expression .)
    NGT             reduce using rule 50 (expression -> expression TIMES expression .)
    NLT             reduce using rule 50 (expression -> expression TIMES expression .)
    GT              reduce using rule 50 (expression -> expression TIMES expression .)
    LT              reduce using rule 50 (expression -> expression TIMES expression .)
    AND             reduce using rule 50 (expression -> expression TIMES expression .)
    OR              reduce using rule 50 (expression -> expression TIMES expression .)
    TERNARYIF       reduce using rule 50 (expression -> expression TIMES expression .)
    SEMI            reduce using rule 50 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 50 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 50 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 50 (expression -> expression TIMES expression .)
    TERNARYIFNOT    reduce using rule 50 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 116 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIV             [ shift and go to state 118 ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 149

    (51) expression -> expression DIV expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    PLUS            reduce using rule 51 (expression -> expression DIV expression .)
    MINUS           reduce using rule 51 (expression -> expression DIV expression .)
    TIMES           reduce using rule 51 (expression -> expression DIV expression .)
    DIV             reduce using rule 51 (expression -> expression DIV expression .)
    MOD             reduce using rule 51 (expression -> expression DIV expression .)
    EQ              reduce using rule 51 (expression -> expression DIV expression .)
    NEQ             reduce using rule 51 (expression -> expression DIV expression .)
    NGT             reduce using rule 51 (expression -> expression DIV expression .)
    NLT             reduce using rule 51 (expression -> expression DIV expression .)
    GT              reduce using rule 51 (expression -> expression DIV expression .)
    LT              reduce using rule 51 (expression -> expression DIV expression .)
    AND             reduce using rule 51 (expression -> expression DIV expression .)
    OR              reduce using rule 51 (expression -> expression DIV expression .)
    TERNARYIF       reduce using rule 51 (expression -> expression DIV expression .)
    SEMI            reduce using rule 51 (expression -> expression DIV expression .)
    COMMA           reduce using rule 51 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 51 (expression -> expression DIV expression .)
    RBRACKET        reduce using rule 51 (expression -> expression DIV expression .)
    TERNARYIFNOT    reduce using rule 51 (expression -> expression DIV expression .)

  ! PLUS            [ shift and go to state 115 ]
  ! MINUS           [ shift and go to state 116 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIV             [ shift and go to state 118 ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 150

    (52) expression -> expression MOD expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for NGT resolved as shift
  ! shift/reduce conflict for NLT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERNARYIF resolved as shift
    SEMI            reduce using rule 52 (expression -> expression MOD expression .)
    COMMA           reduce using rule 52 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 52 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 52 (expression -> expression MOD expression .)
    TERNARYIFNOT    reduce using rule 52 (expression -> expression MOD expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128

  ! PLUS            [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! DIV             [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! NGT             [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! NLT             [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression MOD expression .) ]
  ! TERNARYIF       [ reduce using rule 52 (expression -> expression MOD expression .) ]


state 151

    (53) expression -> expression EQ expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 53 (expression -> expression EQ expression .)
    EQ              reduce using rule 53 (expression -> expression EQ expression .)
    NEQ             reduce using rule 53 (expression -> expression EQ expression .)
    AND             reduce using rule 53 (expression -> expression EQ expression .)
    OR              reduce using rule 53 (expression -> expression EQ expression .)
    TERNARYIF       reduce using rule 53 (expression -> expression EQ expression .)
    SEMI            reduce using rule 53 (expression -> expression EQ expression .)
    COMMA           reduce using rule 53 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 53 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 53 (expression -> expression EQ expression .)
    TERNARYIFNOT    reduce using rule 53 (expression -> expression EQ expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125

  ! PLUS            [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! NGT             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! NLT             [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 53 (expression -> expression EQ expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 152

    (54) expression -> expression NEQ expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 54 (expression -> expression NEQ expression .)
    EQ              reduce using rule 54 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 54 (expression -> expression NEQ expression .)
    AND             reduce using rule 54 (expression -> expression NEQ expression .)
    OR              reduce using rule 54 (expression -> expression NEQ expression .)
    TERNARYIF       reduce using rule 54 (expression -> expression NEQ expression .)
    SEMI            reduce using rule 54 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 54 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 54 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 54 (expression -> expression NEQ expression .)
    TERNARYIFNOT    reduce using rule 54 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125

  ! PLUS            [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! NGT             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! NLT             [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 54 (expression -> expression NEQ expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 153

    (55) expression -> expression NGT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 55 (expression -> expression NGT expression .)
    EQ              reduce using rule 55 (expression -> expression NGT expression .)
    NEQ             reduce using rule 55 (expression -> expression NGT expression .)
    NGT             reduce using rule 55 (expression -> expression NGT expression .)
    NLT             reduce using rule 55 (expression -> expression NGT expression .)
    GT              reduce using rule 55 (expression -> expression NGT expression .)
    LT              reduce using rule 55 (expression -> expression NGT expression .)
    AND             reduce using rule 55 (expression -> expression NGT expression .)
    OR              reduce using rule 55 (expression -> expression NGT expression .)
    TERNARYIF       reduce using rule 55 (expression -> expression NGT expression .)
    SEMI            reduce using rule 55 (expression -> expression NGT expression .)
    COMMA           reduce using rule 55 (expression -> expression NGT expression .)
    RPAREN          reduce using rule 55 (expression -> expression NGT expression .)
    RBRACKET        reduce using rule 55 (expression -> expression NGT expression .)
    TERNARYIFNOT    reduce using rule 55 (expression -> expression NGT expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118

  ! PLUS            [ reduce using rule 55 (expression -> expression NGT expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression NGT expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression NGT expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> expression NGT expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 154

    (56) expression -> expression NLT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 56 (expression -> expression NLT expression .)
    EQ              reduce using rule 56 (expression -> expression NLT expression .)
    NEQ             reduce using rule 56 (expression -> expression NLT expression .)
    NGT             reduce using rule 56 (expression -> expression NLT expression .)
    NLT             reduce using rule 56 (expression -> expression NLT expression .)
    GT              reduce using rule 56 (expression -> expression NLT expression .)
    LT              reduce using rule 56 (expression -> expression NLT expression .)
    AND             reduce using rule 56 (expression -> expression NLT expression .)
    OR              reduce using rule 56 (expression -> expression NLT expression .)
    TERNARYIF       reduce using rule 56 (expression -> expression NLT expression .)
    SEMI            reduce using rule 56 (expression -> expression NLT expression .)
    COMMA           reduce using rule 56 (expression -> expression NLT expression .)
    RPAREN          reduce using rule 56 (expression -> expression NLT expression .)
    RBRACKET        reduce using rule 56 (expression -> expression NLT expression .)
    TERNARYIFNOT    reduce using rule 56 (expression -> expression NLT expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118

  ! PLUS            [ reduce using rule 56 (expression -> expression NLT expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression NLT expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression NLT expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> expression NLT expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 155

    (57) expression -> expression GT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 57 (expression -> expression GT expression .)
    EQ              reduce using rule 57 (expression -> expression GT expression .)
    NEQ             reduce using rule 57 (expression -> expression GT expression .)
    NGT             reduce using rule 57 (expression -> expression GT expression .)
    NLT             reduce using rule 57 (expression -> expression GT expression .)
    GT              reduce using rule 57 (expression -> expression GT expression .)
    LT              reduce using rule 57 (expression -> expression GT expression .)
    AND             reduce using rule 57 (expression -> expression GT expression .)
    OR              reduce using rule 57 (expression -> expression GT expression .)
    TERNARYIF       reduce using rule 57 (expression -> expression GT expression .)
    SEMI            reduce using rule 57 (expression -> expression GT expression .)
    COMMA           reduce using rule 57 (expression -> expression GT expression .)
    RPAREN          reduce using rule 57 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 57 (expression -> expression GT expression .)
    TERNARYIFNOT    reduce using rule 57 (expression -> expression GT expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118

  ! PLUS            [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 156

    (58) expression -> expression LT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 58 (expression -> expression LT expression .)
    EQ              reduce using rule 58 (expression -> expression LT expression .)
    NEQ             reduce using rule 58 (expression -> expression LT expression .)
    NGT             reduce using rule 58 (expression -> expression LT expression .)
    NLT             reduce using rule 58 (expression -> expression LT expression .)
    GT              reduce using rule 58 (expression -> expression LT expression .)
    LT              reduce using rule 58 (expression -> expression LT expression .)
    AND             reduce using rule 58 (expression -> expression LT expression .)
    OR              reduce using rule 58 (expression -> expression LT expression .)
    TERNARYIF       reduce using rule 58 (expression -> expression LT expression .)
    SEMI            reduce using rule 58 (expression -> expression LT expression .)
    COMMA           reduce using rule 58 (expression -> expression LT expression .)
    RPAREN          reduce using rule 58 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 58 (expression -> expression LT expression .)
    TERNARYIFNOT    reduce using rule 58 (expression -> expression LT expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118

  ! PLUS            [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 58 (expression -> expression LT expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! EQ              [ shift and go to state 120 ]
  ! NEQ             [ shift and go to state 121 ]
  ! NGT             [ shift and go to state 122 ]
  ! NLT             [ shift and go to state 123 ]
  ! GT              [ shift and go to state 124 ]
  ! LT              [ shift and go to state 125 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 157

    (59) expression -> expression AND expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 59 (expression -> expression AND expression .)
    AND             reduce using rule 59 (expression -> expression AND expression .)
    OR              reduce using rule 59 (expression -> expression AND expression .)
    TERNARYIF       reduce using rule 59 (expression -> expression AND expression .)
    SEMI            reduce using rule 59 (expression -> expression AND expression .)
    COMMA           reduce using rule 59 (expression -> expression AND expression .)
    RPAREN          reduce using rule 59 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 59 (expression -> expression AND expression .)
    TERNARYIFNOT    reduce using rule 59 (expression -> expression AND expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125

  ! PLUS            [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! NGT             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! NLT             [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression AND expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! AND             [ shift and go to state 126 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 158

    (60) expression -> expression OR expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    MOD             reduce using rule 60 (expression -> expression OR expression .)
    OR              reduce using rule 60 (expression -> expression OR expression .)
    TERNARYIF       reduce using rule 60 (expression -> expression OR expression .)
    SEMI            reduce using rule 60 (expression -> expression OR expression .)
    COMMA           reduce using rule 60 (expression -> expression OR expression .)
    RPAREN          reduce using rule 60 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 60 (expression -> expression OR expression .)
    TERNARYIFNOT    reduce using rule 60 (expression -> expression OR expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126

  ! PLUS            [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! NGT             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! NLT             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression OR expression .) ]
  ! MOD             [ shift and go to state 119 ]
  ! OR              [ shift and go to state 127 ]
  ! TERNARYIF       [ shift and go to state 128 ]


state 159

    (63) expression -> expression TERNARYIF expression . TERNARYIFNOT expression
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    TERNARYIFNOT    shift and go to state 169
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 160

    (67) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    NGT             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    NLT             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    TERNARYIF       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    TERNARYIFNOT    reduce using rule 67 (expression -> LPAREN expression RPAREN .)


state 161

    (88) expression_seq -> expression COMMA expression_seq .

    SEMI            reduce using rule 88 (expression_seq -> expression COMMA expression_seq .)
    RPAREN          reduce using rule 88 (expression_seq -> expression COMMA expression_seq .)


state 162

    (39) sub_call -> ID LPAREN expression_list RPAREN .

    SEMI            reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    DIV             reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    MOD             reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    EQ              reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    NEQ             reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    NGT             reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    NLT             reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    LT              reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    AND             reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    OR              reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    TERNARYIF       reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    RBRACKET        reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)
    TERNARYIFNOT    reduce using rule 39 (sub_call -> ID LPAREN expression_list RPAREN .)


state 163

    (47) variable -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    PLUSASG         reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    MINUSASG        reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    TIMESASG        reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    DIVASG          reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    MODASG          reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    DIV             reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    MOD             reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    NGT             reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    NLT             reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    TERNARYIF       reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)
    TERNARYIFNOT    reduce using rule 47 (variable -> ID LBRACKET expression RBRACKET .)


state 164

    (84) literal_seq -> literal COMMA literal_seq .

    RBRACKET        reduce using rule 84 (literal_seq -> literal COMMA literal_seq .)


state 165

    (28) if_stmt -> IF LPAREN expression RPAREN statement .
    (29) if_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    WRITE           reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 170

  ! ELSE            [ reduce using rule 28 (if_stmt -> IF LPAREN expression RPAREN statement .) ]


state 166

    (30) if_stmt -> IF LPAREN expression RPAREN LBRACE . compound_stmt RBRACE
    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE . compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (18) compound_stmt -> . var_declaration_list statement_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    compound_stmt                  shift and go to state 171
    var_declaration_list           shift and go to state 45
    var_declaration                shift and go to state 46
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48

state 167

    (32) while_stmt -> WHILE LPAREN expression RPAREN LBRACE . compound_stmt RBRACE
    (18) compound_stmt -> . var_declaration_list statement_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    compound_stmt                  shift and go to state 172
    var_declaration_list           shift and go to state 45
    var_declaration                shift and go to state 46
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48

state 168

    (33) for_stmt -> FOR LPAREN assign SEMI expression . SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

    SEMI            shift and go to state 173
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128


state 169

    (63) expression -> expression TERNARYIF expression TERNARYIFNOT . expression
    (48) expression -> . expression PLUS expression
    (49) expression -> . expression MINUS expression
    (50) expression -> . expression TIMES expression
    (51) expression -> . expression DIV expression
    (52) expression -> . expression MOD expression
    (53) expression -> . expression EQ expression
    (54) expression -> . expression NEQ expression
    (55) expression -> . expression NGT expression
    (56) expression -> . expression NLT expression
    (57) expression -> . expression GT expression
    (58) expression -> . expression LT expression
    (59) expression -> . expression AND expression
    (60) expression -> . expression OR expression
    (61) expression -> . NOT expression
    (62) expression -> . SIGN expression
    (63) expression -> . expression TERNARYIF expression TERNARYIFNOT expression
    (64) expression -> . sub_call
    (65) expression -> . variable
    (66) expression -> . literal
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . param
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET
    (69) literal -> . NUM
    (70) literal -> . CHAIN
    (71) literal -> . TRUE
    (72) literal -> . FALSE
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    NOT             shift and go to state 88
    SIGN            shift and go to state 89
    LPAREN          shift and go to state 93
    ID              shift and go to state 73
    NUM             shift and go to state 32
    CHAIN           shift and go to state 33
    TRUE            shift and go to state 34
    FALSE           shift and go to state 35
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    expression                     shift and go to state 174
    sub_call                       shift and go to state 90
    variable                       shift and go to state 91
    literal                        shift and go to state 92
    param                          shift and go to state 94
    type_specifier                 shift and go to state 21

state 170

    (29) if_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (19) statement -> . if_stmt
    (20) statement -> . while_stmt
    (21) statement -> . for_stmt
    (22) statement -> . break_stmt SEMI
    (23) statement -> . return_stmt SEMI
    (24) statement -> . read_stmt SEMI
    (25) statement -> . write_stmt SEMI
    (26) statement -> . assign SEMI
    (27) statement -> . sub_call SEMI
    (28) if_stmt -> . IF LPAREN expression RPAREN statement
    (29) if_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE
    (32) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE
    (33) for_stmt -> . FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE
    (34) break_stmt -> . BREAK
    (37) return_stmt -> . RETURN
    (38) return_stmt -> . RETURN expression
    (35) read_stmt -> . READ variable
    (36) write_stmt -> . WRITE expression_list
    (40) assign -> . variable ASSIGN expression
    (41) assign -> . variable PLUSASG expression
    (42) assign -> . variable MINUSASG expression
    (43) assign -> . variable TIMESASG expression
    (44) assign -> . variable DIVASG expression
    (45) assign -> . variable MODASG expression
    (39) sub_call -> . ID LPAREN expression_list RPAREN
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    IF              shift and go to state 65
    WHILE           shift and go to state 66
    FOR             shift and go to state 67
    BREAK           shift and go to state 68
    RETURN          shift and go to state 69
    READ            shift and go to state 70
    WRITE           shift and go to state 72
    ID              shift and go to state 73

    statement                      shift and go to state 175
    if_stmt                        shift and go to state 56
    while_stmt                     shift and go to state 57
    for_stmt                       shift and go to state 58
    break_stmt                     shift and go to state 59
    return_stmt                    shift and go to state 60
    read_stmt                      shift and go to state 61
    write_stmt                     shift and go to state 62
    assign                         shift and go to state 63
    sub_call                       shift and go to state 64
    variable                       shift and go to state 71

state 171

    (30) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt . RBRACE
    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt . RBRACE ELSE LBRACE compound_stmt RBRACE

    RBRACE          shift and go to state 176


state 172

    (32) while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt . RBRACE

    RBRACE          shift and go to state 177


state 173

    (33) for_stmt -> FOR LPAREN assign SEMI expression SEMI . assign RPAREN LBRACE compound_stmt RBRACE
    (40) assign -> . variable ASSIGN expression
    (41) assign -> . variable PLUSASG expression
    (42) assign -> . variable MINUSASG expression
    (43) assign -> . variable TIMESASG expression
    (44) assign -> . variable DIVASG expression
    (45) assign -> . variable MODASG expression
    (46) variable -> . ID
    (47) variable -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 96

    assign                         shift and go to state 178
    variable                       shift and go to state 71

state 174

    (63) expression -> expression TERNARYIF expression TERNARYIFNOT expression .
    (48) expression -> expression . PLUS expression
    (49) expression -> expression . MINUS expression
    (50) expression -> expression . TIMES expression
    (51) expression -> expression . DIV expression
    (52) expression -> expression . MOD expression
    (53) expression -> expression . EQ expression
    (54) expression -> expression . NEQ expression
    (55) expression -> expression . NGT expression
    (56) expression -> expression . NLT expression
    (57) expression -> expression . GT expression
    (58) expression -> expression . LT expression
    (59) expression -> expression . AND expression
    (60) expression -> expression . OR expression
    (63) expression -> expression . TERNARYIF expression TERNARYIFNOT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for NGT resolved as shift
  ! shift/reduce conflict for NLT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERNARYIF resolved as shift
    SEMI            reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .)
    COMMA           reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .)
    RPAREN          reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .)
    RBRACKET        reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .)
    TERNARYIFNOT    reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .)
    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    TIMES           shift and go to state 117
    DIV             shift and go to state 118
    MOD             shift and go to state 119
    EQ              shift and go to state 120
    NEQ             shift and go to state 121
    NGT             shift and go to state 122
    NLT             shift and go to state 123
    GT              shift and go to state 124
    LT              shift and go to state 125
    AND             shift and go to state 126
    OR              shift and go to state 127
    TERNARYIF       shift and go to state 128

  ! PLUS            [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! TIMES           [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! DIV             [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! NEQ             [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! NGT             [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! NLT             [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]
  ! TERNARYIF       [ reduce using rule 63 (expression -> expression TERNARYIF expression TERNARYIFNOT expression .) ]


state 175

    (29) if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    IF              reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WRITE           reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 29 (if_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 176

    (30) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .
    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE . ELSE LBRACE compound_stmt RBRACE

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    WHILE           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    FOR             reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    BREAK           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    RETURN          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    READ            reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    WRITE           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    ID              reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    RBRACE          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    ELSE            shift and go to state 179

  ! ELSE            [ reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE .) ]


state 177

    (32) while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .

    IF              reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    WHILE           reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    FOR             reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    BREAK           reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    RETURN          reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    READ            reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    WRITE           reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    ID              reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    RBRACE          reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)
    ELSE            reduce using rule 32 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE compound_stmt RBRACE .)


state 178

    (33) for_stmt -> FOR LPAREN assign SEMI expression SEMI assign . RPAREN LBRACE compound_stmt RBRACE

    RPAREN          shift and go to state 180


state 179

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE . LBRACE compound_stmt RBRACE

    LBRACE          shift and go to state 181


state 180

    (33) for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN . LBRACE compound_stmt RBRACE

    LBRACE          shift and go to state 182


state 181

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE . compound_stmt RBRACE
    (18) compound_stmt -> . var_declaration_list statement_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    compound_stmt                  shift and go to state 183
    var_declaration_list           shift and go to state 45
    var_declaration                shift and go to state 46
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48

state 182

    (33) for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE . compound_stmt RBRACE
    (18) compound_stmt -> . var_declaration_list statement_list
    (78) var_declaration_list -> . var_declaration var_declaration_list
    (79) var_declaration_list -> . empty
    (7) var_declaration -> . type_specifier var_spec_seq SEMI
    (90) empty -> .
    (12) type_specifier -> . INT
    (13) type_specifier -> . STRING
    (14) type_specifier -> . BOOL
    (15) type_specifier -> . VOID

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RBRACE          reduce using rule 90 (empty -> .)
    INT             shift and go to state 7
    STRING          shift and go to state 8
    BOOL            shift and go to state 9
    VOID            shift and go to state 10

    compound_stmt                  shift and go to state 184
    var_declaration_list           shift and go to state 45
    var_declaration                shift and go to state 46
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48

state 183

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt . RBRACE

    RBRACE          shift and go to state 185


state 184

    (33) for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt . RBRACE

    RBRACE          shift and go to state 186


state 185

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .

    IF              reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    WHILE           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    FOR             reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    BREAK           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    RETURN          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    READ            reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    WRITE           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    ID              reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    RBRACE          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)
    ELSE            reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE compound_stmt RBRACE ELSE LBRACE compound_stmt RBRACE .)


state 186

    (33) for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .

    IF              reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    WHILE           reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    FOR             reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    BREAK           reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    RETURN          reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    READ            reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    WRITE           reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    ID              reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    RBRACE          reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)
    ELSE            reduce using rule 33 (for_stmt -> FOR LPAREN assign SEMI expression SEMI assign RPAREN LBRACE compound_stmt RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 150 resolved as shift
WARNING: shift/reduce conflict for DIV in state 150 resolved as shift
WARNING: shift/reduce conflict for MOD in state 150 resolved as shift
WARNING: shift/reduce conflict for EQ in state 150 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 150 resolved as shift
WARNING: shift/reduce conflict for NGT in state 150 resolved as shift
WARNING: shift/reduce conflict for NLT in state 150 resolved as shift
WARNING: shift/reduce conflict for GT in state 150 resolved as shift
WARNING: shift/reduce conflict for LT in state 150 resolved as shift
WARNING: shift/reduce conflict for AND in state 150 resolved as shift
WARNING: shift/reduce conflict for OR in state 150 resolved as shift
WARNING: shift/reduce conflict for TERNARYIF in state 150 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 174 resolved as shift
WARNING: shift/reduce conflict for DIV in state 174 resolved as shift
WARNING: shift/reduce conflict for MOD in state 174 resolved as shift
WARNING: shift/reduce conflict for EQ in state 174 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 174 resolved as shift
WARNING: shift/reduce conflict for NGT in state 174 resolved as shift
WARNING: shift/reduce conflict for NLT in state 174 resolved as shift
WARNING: shift/reduce conflict for GT in state 174 resolved as shift
WARNING: shift/reduce conflict for LT in state 174 resolved as shift
WARNING: shift/reduce conflict for AND in state 174 resolved as shift
WARNING: shift/reduce conflict for OR in state 174 resolved as shift
WARNING: shift/reduce conflict for TERNARYIF in state 174 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 176 resolved as shift
