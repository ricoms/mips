
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ELSE IF INT RETURN VOID WHILE PLUS MINUS TIMES DIVIDE LESS LESSEQUAL GREATER GREATEREQUAL EQUAL NEQUAL ASSIGN SEMICOLON COMMA LPAREN RPAREN LBRACKET RBRACKET LBRACE RBRACE ID NUMBERprogram : declaration_listdeclaration_list : declaration_list declaration\n        | declarationdeclaration : var_declaration\n        | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n        | type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONtype_specifier : INT\n        | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n        | VOIDparam_list : param_list COMMA param\n        | param\n        | emptyparam : type_specifier ID\n        | type_specifier ID LBRACKET RBRACKETcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : local_declarations var_declaration\n        | emptystatement_list : statement_list statement\n        | emptystatement : expression_stmt\n        | compound_stmt\n        | selection_stmt\n        | iteration_stmt\n        | return_stmt\n    expression_stmt : expression SEMICOLON\n        | SEMICOLONselection_stmt : IF LPAREN expression RPAREN statement\n        | IF LPAREN expression RPAREN statement ELSE statementiteration_stmt : WHILE LPAREN expression RPAREN statementreturn_stmt : RETURN SEMICOLON\n        | RETURN expression SEMICOLONexpression : var ASSIGN expression\n        | simple_expressionvar : ID\n        | ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expression\n        | additive_expressionrelop : LESS\n        | LESSEQUAL\n        | GREATER\n        | GREATEREQUAL\n        | EQUAL\n        | NEQUAL\n    additive_expression : additive_expression addop term\n        | term addop : PLUS\n        | MINUS\n    term : term mulop factor\n        | factor mulop : TIMES\n        | DIVIDE\n    factor : LPAREN expression RPAREN\n        | var\n        | call\n        | NUMBERcall : ID LPAREN args RPAREN args : args_list\n        | empty\n    args_list : args_list COMMA expression\n        | expressionempty :'
    
_lr_action_items = {'$end':([1,5,6,7,8,10,13,25,28,57,],[0,-4,-3,-1,-5,-2,-6,-7,-10,-18,]),'DIVIDE':([41,42,43,47,48,54,81,82,84,90,95,97,],[-52,-37,-58,-57,74,-56,74,-56,-55,-51,-38,-59,]),'LBRACE':([13,23,25,27,31,32,34,35,36,40,44,46,50,51,55,56,57,72,78,93,98,99,101,102,103,104,],[-6,27,-7,-64,-64,-20,-19,-22,27,-29,-27,-24,-21,-25,-26,-23,-18,-28,-33,-34,27,27,-30,-32,27,-31,]),'GREATEREQUAL':([38,41,42,43,47,48,54,81,82,84,90,95,97,],[61,-52,-37,-58,-57,-48,-56,-47,-56,-55,-51,-38,-59,]),'IF':([13,25,27,31,32,34,35,36,40,44,46,50,51,55,56,57,72,78,93,98,99,101,102,103,104,],[-6,-7,-64,-64,-20,-19,-22,49,-29,-27,-24,-21,-25,-26,-23,-18,-28,-33,-34,49,49,-30,-32,49,-31,]),'NEQUAL':([38,41,42,43,47,48,54,81,82,84,90,95,97,],[63,-52,-37,-58,-57,-48,-56,-47,-56,-55,-51,-38,-59,]),'LPAREN':([9,13,25,27,31,32,34,35,36,39,40,42,44,46,49,50,51,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,80,93,96,98,99,101,102,103,104,],[12,-6,-7,-64,-64,-20,-19,-22,39,39,-29,71,-27,-24,76,-21,-25,77,39,-26,-23,-18,-43,-42,-44,-49,-46,-50,-45,39,39,-41,39,39,-28,39,-54,-53,39,39,-33,39,-34,39,39,39,-30,-32,39,-31,]),'SEMICOLON':([9,13,21,25,27,31,32,34,35,36,37,38,40,41,42,43,44,45,46,47,48,50,51,53,54,55,56,57,58,72,78,79,81,82,83,84,90,93,94,95,97,98,99,101,102,103,104,],[13,-6,25,-7,-64,-64,-20,-19,-22,40,13,-40,-29,-52,-37,-58,-27,72,-24,-57,-48,-21,-25,78,-56,-26,-23,-18,-36,-28,-33,93,-47,-56,-39,-55,-51,-34,-35,-38,-59,40,40,-30,-32,40,-31,]),'COMMA':([12,15,19,20,22,29,30,38,41,42,43,47,48,54,58,81,82,83,84,86,89,90,94,95,97,100,],[-64,-14,-15,24,-16,-13,-17,-40,-52,-37,-58,-57,-48,-56,-36,-47,-56,-39,-55,96,-63,-51,-35,-38,-59,-62,]),'RPAREN':([12,15,17,18,19,20,22,29,30,38,41,42,43,47,48,54,58,69,71,81,82,83,84,86,87,88,89,90,91,92,94,95,97,100,],[-64,-14,-12,23,-15,-11,-16,-13,-17,-40,-52,-37,-58,-57,-48,-56,-36,84,-64,-47,-56,-39,-55,-60,-61,97,-63,-51,98,99,-35,-38,-59,-62,]),'VOID':([0,5,6,7,8,10,12,13,24,25,27,28,31,32,34,57,],[4,-4,-3,4,-5,-2,17,-6,4,-7,-64,-10,4,-20,-19,-18,]),'ID':([2,3,4,13,16,17,25,27,31,32,33,34,35,36,39,40,44,46,50,51,53,55,56,57,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,80,93,96,98,99,101,102,103,104,],[-8,9,-9,-6,22,-9,-7,-64,-64,-20,37,-19,-22,42,42,-29,-27,-24,-21,-25,42,-26,-23,-18,-43,-42,-44,-49,-46,-50,-45,42,42,-41,42,42,-28,42,-54,-53,42,42,-33,42,-34,42,42,42,-30,-32,42,-31,]),'NUMBER':([11,13,25,27,31,32,34,35,36,39,40,44,46,50,51,53,55,56,57,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,80,93,96,98,99,101,102,103,104,],[14,-6,-7,-64,-64,-20,-19,-22,43,43,-29,-27,-24,-21,-25,43,-26,-23,-18,-43,-42,-44,-49,-46,-50,-45,43,43,-41,43,43,-28,43,-54,-53,43,43,-33,43,-34,43,43,43,-30,-32,43,-31,]),'TIMES':([41,42,43,47,48,54,81,82,84,90,95,97,],[-52,-37,-58,-57,75,-56,75,-56,-55,-51,-38,-59,]),'RBRACKET':([14,26,38,41,42,43,47,48,54,58,81,82,83,84,85,90,94,95,97,],[21,30,-40,-52,-37,-58,-57,-48,-56,-36,-47,-56,-39,-55,95,-51,-35,-38,-59,]),'GREATER':([38,41,42,43,47,48,54,81,82,84,90,95,97,],[59,-52,-37,-58,-57,-48,-56,-47,-56,-55,-51,-38,-59,]),'LESSEQUAL':([38,41,42,43,47,48,54,81,82,84,90,95,97,],[60,-52,-37,-58,-57,-48,-56,-47,-56,-55,-51,-38,-59,]),'INT':([0,5,6,7,8,10,12,13,24,25,27,28,31,32,34,57,],[2,-4,-3,2,-5,-2,2,-6,2,-7,-64,-10,2,-20,-19,-18,]),'LBRACKET':([9,22,37,42,],[11,26,11,70,]),'PLUS':([38,41,42,43,47,48,54,81,82,83,84,90,95,97,],[62,-52,-37,-58,-57,-48,-56,-47,-56,62,-55,-51,-38,-59,]),'ELSE':([40,44,46,51,55,56,57,72,78,93,101,102,104,],[-29,-27,-24,-25,-26,-23,-18,-28,-33,-34,103,-32,-31,]),'EQUAL':([38,41,42,43,47,48,54,81,82,84,90,95,97,],[65,-52,-37,-58,-57,-48,-56,-47,-56,-55,-51,-38,-59,]),'MINUS':([38,41,42,43,47,48,54,81,82,83,84,90,95,97,],[64,-52,-37,-58,-57,-48,-56,-47,-56,64,-55,-51,-38,-59,]),'WHILE':([13,25,27,31,32,34,35,36,40,44,46,50,51,55,56,57,72,78,93,98,99,101,102,103,104,],[-6,-7,-64,-64,-20,-19,-22,52,-29,-27,-24,-21,-25,-26,-23,-18,-28,-33,-34,52,52,-30,-32,52,-31,]),'RETURN':([13,25,27,31,32,34,35,36,40,44,46,50,51,55,56,57,72,78,93,98,99,101,102,103,104,],[-6,-7,-64,-64,-20,-19,-22,53,-29,-27,-24,-21,-25,-26,-23,-18,-28,-33,-34,53,53,-30,-32,53,-31,]),'LESS':([38,41,42,43,47,48,54,81,82,84,90,95,97,],[68,-52,-37,-58,-57,-48,-56,-47,-56,-55,-51,-38,-59,]),'RBRACE':([13,25,27,31,32,34,35,36,40,44,46,50,51,55,56,57,72,78,93,101,102,104,],[-6,-7,-64,-64,-20,-19,-22,57,-29,-27,-24,-21,-25,-26,-23,-18,-28,-33,-34,-30,-32,-31,]),'ASSIGN':([42,54,95,],[-37,80,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'additive_expression':([36,39,53,67,70,71,76,77,80,96,98,99,103,],[38,38,38,83,38,38,38,38,38,38,38,38,38,]),'local_declarations':([27,],[31,]),'call':([36,39,53,66,67,70,71,73,76,77,80,96,98,99,103,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'factor':([36,39,53,66,67,70,71,73,76,77,80,96,98,99,103,],[41,41,41,41,41,41,41,90,41,41,41,41,41,41,41,]),'declaration':([0,7,],[6,10,]),'addop':([38,83,],[66,66,]),'args':([71,],[88,]),'return_stmt':([36,98,99,103,],[44,44,44,44,]),'statement_list':([31,],[36,]),'args_list':([71,],[86,]),'fun_declaration':([0,7,],[8,8,]),'expression':([36,39,53,70,71,76,77,80,96,98,99,103,],[45,69,79,85,89,91,92,94,100,45,45,45,]),'compound_stmt':([23,36,98,99,103,],[28,46,46,46,46,]),'program':([0,],[1,]),'param':([12,24,],[15,29,]),'type_specifier':([0,7,12,24,31,],[3,3,16,16,33,]),'term':([36,39,53,66,67,70,71,76,77,80,96,98,99,103,],[48,48,48,81,48,48,48,48,48,48,48,48,48,48,]),'relop':([38,],[67,]),'mulop':([48,81,],[73,73,]),'iteration_stmt':([36,98,99,103,],[55,55,55,55,]),'selection_stmt':([36,98,99,103,],[51,51,51,51,]),'statement':([36,98,99,103,],[50,101,102,104,]),'var_declaration':([0,7,31,],[5,5,34,]),'params':([12,],[18,]),'expression_stmt':([36,98,99,103,],[56,56,56,56,]),'empty':([12,27,31,71,],[19,32,35,87,]),'var':([36,39,53,66,67,70,71,73,76,77,80,96,98,99,103,],[54,54,54,82,82,54,54,82,54,54,54,54,54,54,54,]),'param_list':([12,],[20,]),'declaration_list':([0,],[7,]),'simple_expression':([36,39,53,70,71,76,77,80,96,98,99,103,],[58,58,58,58,58,58,58,58,58,58,58,58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','cminus_parser.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','cminus_parser.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','cminus_parser.py',14),
  ('declaration -> var_declaration','declaration',1,'p_declaration','cminus_parser.py',19),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','cminus_parser.py',20),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','cminus_parser.py',23),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','cminus_parser.py',24),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cminus_parser.py',28),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cminus_parser.py',29),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','cminus_parser.py',33),
  ('params -> param_list','params',1,'p_params','cminus_parser.py',37),
  ('params -> VOID','params',1,'p_params','cminus_parser.py',38),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','cminus_parser.py',42),
  ('param_list -> param','param_list',1,'p_param_list','cminus_parser.py',43),
  ('param_list -> empty','param_list',1,'p_param_list','cminus_parser.py',44),
  ('param -> type_specifier ID','param',2,'p_param','cminus_parser.py',48),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param','cminus_parser.py',49),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','cminus_parser.py',53),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','cminus_parser.py',57),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','cminus_parser.py',58),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cminus_parser.py',62),
  ('statement_list -> empty','statement_list',1,'p_statement_list','cminus_parser.py',63),
  ('statement -> expression_stmt','statement',1,'p_statement','cminus_parser.py',67),
  ('statement -> compound_stmt','statement',1,'p_statement','cminus_parser.py',68),
  ('statement -> selection_stmt','statement',1,'p_statement','cminus_parser.py',69),
  ('statement -> iteration_stmt','statement',1,'p_statement','cminus_parser.py',70),
  ('statement -> return_stmt','statement',1,'p_statement','cminus_parser.py',71),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','cminus_parser.py',76),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','cminus_parser.py',77),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','cminus_parser.py',81),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','cminus_parser.py',82),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','cminus_parser.py',86),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','cminus_parser.py',90),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','cminus_parser.py',91),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','cminus_parser.py',95),
  ('expression -> simple_expression','expression',1,'p_expression','cminus_parser.py',96),
  ('var -> ID','var',1,'p_var','cminus_parser.py',100),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','cminus_parser.py',101),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','cminus_parser.py',105),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','cminus_parser.py',106),
  ('relop -> LESS','relop',1,'p_relop','cminus_parser.py',110),
  ('relop -> LESSEQUAL','relop',1,'p_relop','cminus_parser.py',111),
  ('relop -> GREATER','relop',1,'p_relop','cminus_parser.py',112),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','cminus_parser.py',113),
  ('relop -> EQUAL','relop',1,'p_relop','cminus_parser.py',114),
  ('relop -> NEQUAL','relop',1,'p_relop','cminus_parser.py',115),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','cminus_parser.py',120),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','cminus_parser.py',121),
  ('addop -> PLUS','addop',1,'p_addop','cminus_parser.py',125),
  ('addop -> MINUS','addop',1,'p_addop','cminus_parser.py',126),
  ('term -> term mulop factor','term',3,'p_term','cminus_parser.py',131),
  ('term -> factor','term',1,'p_term','cminus_parser.py',132),
  ('mulop -> TIMES','mulop',1,'p_mulop','cminus_parser.py',136),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','cminus_parser.py',137),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','cminus_parser.py',142),
  ('factor -> var','factor',1,'p_factor','cminus_parser.py',143),
  ('factor -> call','factor',1,'p_factor','cminus_parser.py',144),
  ('factor -> NUMBER','factor',1,'p_factor','cminus_parser.py',145),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','cminus_parser.py',149),
  ('args -> args_list','args',1,'p_args','cminus_parser.py',153),
  ('args -> empty','args',1,'p_args','cminus_parser.py',154),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','cminus_parser.py',159),
  ('args_list -> expression','args_list',1,'p_args_list','cminus_parser.py',160),
  ('empty -> <empty>','empty',0,'p_empty','cminus_parser.py',164),
]
