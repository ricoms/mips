// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2017 00:32:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_vlg_sample_tst(
	clk_fpga,
	interrupt,
	reset,
	sampler_tx
);
input  clk_fpga;
input  interrupt;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk_fpga or interrupt or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_vlg_check_tst (
	aluOp,
	aluSrc,
	branch,
	instrucao,
	jump,
	memRead,
	memWrite,
	memtoReg,
	regDst,
	regWrite,
	sampler_rx
);
input [1:0] aluOp;
input  aluSrc;
input  branch;
input [31:0] instrucao;
input  jump;
input  memRead;
input  memWrite;
input  memtoReg;
input  regDst;
input  regWrite;
input sampler_rx;

reg [1:0] aluOp_expected;
reg  aluSrc_expected;
reg  branch_expected;
reg [31:0] instrucao_expected;
reg  jump_expected;
reg  memRead_expected;
reg  memWrite_expected;
reg  memtoReg_expected;
reg  regDst_expected;
reg  regWrite_expected;

reg [1:0] aluOp_prev;
reg  aluSrc_prev;
reg  branch_prev;
reg [31:0] instrucao_prev;
reg  jump_prev;
reg  memRead_prev;
reg  memWrite_prev;
reg  memtoReg_prev;
reg  regDst_prev;
reg  regWrite_prev;

reg [1:0] aluOp_expected_prev;
reg  aluSrc_expected_prev;
reg  branch_expected_prev;
reg [31:0] instrucao_expected_prev;
reg  jump_expected_prev;
reg  memRead_expected_prev;
reg  memWrite_expected_prev;
reg  memtoReg_expected_prev;
reg  regDst_expected_prev;
reg  regWrite_expected_prev;

reg [1:0] last_aluOp_exp;
reg  last_aluSrc_exp;
reg  last_branch_exp;
reg [31:0] last_instrucao_exp;
reg  last_jump_exp;
reg  last_memRead_exp;
reg  last_memWrite_exp;
reg  last_memtoReg_exp;
reg  last_regDst_exp;
reg  last_regWrite_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluOp_prev = aluOp;
	aluSrc_prev = aluSrc;
	branch_prev = branch;
	instrucao_prev = instrucao;
	jump_prev = jump;
	memRead_prev = memRead;
	memWrite_prev = memWrite;
	memtoReg_prev = memtoReg;
	regDst_prev = regDst;
	regWrite_prev = regWrite;
end

// update expected /o prevs

always @(trigger)
begin
	aluOp_expected_prev = aluOp_expected;
	aluSrc_expected_prev = aluSrc_expected;
	branch_expected_prev = branch_expected;
	instrucao_expected_prev = instrucao_expected;
	jump_expected_prev = jump_expected;
	memRead_expected_prev = memRead_expected;
	memWrite_expected_prev = memWrite_expected;
	memtoReg_expected_prev = memtoReg_expected;
	regDst_expected_prev = regDst_expected;
	regWrite_expected_prev = regWrite_expected;
end



// expected instrucao[31]
initial
begin
	instrucao_expected[31] = 1'bX;
end 

// expected instrucao[30]
initial
begin
	instrucao_expected[30] = 1'bX;
end 

// expected instrucao[29]
initial
begin
	instrucao_expected[29] = 1'bX;
end 

// expected instrucao[28]
initial
begin
	instrucao_expected[28] = 1'bX;
end 

// expected instrucao[27]
initial
begin
	instrucao_expected[27] = 1'bX;
end 

// expected instrucao[26]
initial
begin
	instrucao_expected[26] = 1'bX;
end 

// expected regDst
initial
begin
	regDst_expected = 1'bX;
end 

// expected aluSrc
initial
begin
	aluSrc_expected = 1'bX;
end 

// expected memtoReg
initial
begin
	memtoReg_expected = 1'bX;
end 

// expected regWrite
initial
begin
	regWrite_expected = 1'bX;
end 

// expected memRead
initial
begin
	memRead_expected = 1'bX;
end 

// expected memWrite
initial
begin
	memWrite_expected = 1'bX;
end 

// expected branch
initial
begin
	branch_expected = 1'bX;
end 

// expected jump
initial
begin
	jump_expected = 1'bX;
end 
// expected aluOp[ 1 ]
initial
begin
	aluOp_expected[1] = 1'bX;
end 
// expected aluOp[ 0 ]
initial
begin
	aluOp_expected[0] = 1'bX;
end 
// generate trigger
always @(aluOp_expected or aluOp or aluSrc_expected or aluSrc or branch_expected or branch or instrucao_expected or instrucao or jump_expected or jump or memRead_expected or memRead or memWrite_expected or memWrite or memtoReg_expected or memtoReg or regDst_expected or regDst or regWrite_expected or regWrite)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluOp = %b | expected aluSrc = %b | expected branch = %b | expected instrucao = %b | expected jump = %b | expected memRead = %b | expected memWrite = %b | expected memtoReg = %b | expected regDst = %b | expected regWrite = %b | ",aluOp_expected_prev,aluSrc_expected_prev,branch_expected_prev,instrucao_expected_prev,jump_expected_prev,memRead_expected_prev,memWrite_expected_prev,memtoReg_expected_prev,regDst_expected_prev,regWrite_expected_prev);
	$display("| real aluOp = %b | real aluSrc = %b | real branch = %b | real instrucao = %b | real jump = %b | real memRead = %b | real memWrite = %b | real memtoReg = %b | real regDst = %b | real regWrite = %b | ",aluOp_prev,aluSrc_prev,branch_prev,instrucao_prev,jump_prev,memRead_prev,memWrite_prev,memtoReg_prev,regDst_prev,regWrite_prev);
`endif
	if (
		( aluOp_expected_prev[0] !== 1'bx ) && ( aluOp_prev[0] !== aluOp_expected_prev[0] )
		&& ((aluOp_expected_prev[0] !== last_aluOp_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOp_exp[0] = aluOp_expected_prev[0];
	end
	if (
		( aluOp_expected_prev[1] !== 1'bx ) && ( aluOp_prev[1] !== aluOp_expected_prev[1] )
		&& ((aluOp_expected_prev[1] !== last_aluOp_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOp_expected_prev);
		$display ("     Real value = %b", aluOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOp_exp[1] = aluOp_expected_prev[1];
	end
	if (
		( aluSrc_expected_prev !== 1'bx ) && ( aluSrc_prev !== aluSrc_expected_prev )
		&& ((aluSrc_expected_prev !== last_aluSrc_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluSrc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluSrc_expected_prev);
		$display ("     Real value = %b", aluSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aluSrc_exp = aluSrc_expected_prev;
	end
	if (
		( branch_expected_prev !== 1'bx ) && ( branch_prev !== branch_expected_prev )
		&& ((branch_expected_prev !== last_branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_expected_prev);
		$display ("     Real value = %b", branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_branch_exp = branch_expected_prev;
	end
	if (
		( instrucao_expected_prev[0] !== 1'bx ) && ( instrucao_prev[0] !== instrucao_expected_prev[0] )
		&& ((instrucao_expected_prev[0] !== last_instrucao_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[0] = instrucao_expected_prev[0];
	end
	if (
		( instrucao_expected_prev[1] !== 1'bx ) && ( instrucao_prev[1] !== instrucao_expected_prev[1] )
		&& ((instrucao_expected_prev[1] !== last_instrucao_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[1] = instrucao_expected_prev[1];
	end
	if (
		( instrucao_expected_prev[2] !== 1'bx ) && ( instrucao_prev[2] !== instrucao_expected_prev[2] )
		&& ((instrucao_expected_prev[2] !== last_instrucao_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[2] = instrucao_expected_prev[2];
	end
	if (
		( instrucao_expected_prev[3] !== 1'bx ) && ( instrucao_prev[3] !== instrucao_expected_prev[3] )
		&& ((instrucao_expected_prev[3] !== last_instrucao_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[3] = instrucao_expected_prev[3];
	end
	if (
		( instrucao_expected_prev[4] !== 1'bx ) && ( instrucao_prev[4] !== instrucao_expected_prev[4] )
		&& ((instrucao_expected_prev[4] !== last_instrucao_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[4] = instrucao_expected_prev[4];
	end
	if (
		( instrucao_expected_prev[5] !== 1'bx ) && ( instrucao_prev[5] !== instrucao_expected_prev[5] )
		&& ((instrucao_expected_prev[5] !== last_instrucao_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[5] = instrucao_expected_prev[5];
	end
	if (
		( instrucao_expected_prev[6] !== 1'bx ) && ( instrucao_prev[6] !== instrucao_expected_prev[6] )
		&& ((instrucao_expected_prev[6] !== last_instrucao_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[6] = instrucao_expected_prev[6];
	end
	if (
		( instrucao_expected_prev[7] !== 1'bx ) && ( instrucao_prev[7] !== instrucao_expected_prev[7] )
		&& ((instrucao_expected_prev[7] !== last_instrucao_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[7] = instrucao_expected_prev[7];
	end
	if (
		( instrucao_expected_prev[8] !== 1'bx ) && ( instrucao_prev[8] !== instrucao_expected_prev[8] )
		&& ((instrucao_expected_prev[8] !== last_instrucao_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[8] = instrucao_expected_prev[8];
	end
	if (
		( instrucao_expected_prev[9] !== 1'bx ) && ( instrucao_prev[9] !== instrucao_expected_prev[9] )
		&& ((instrucao_expected_prev[9] !== last_instrucao_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[9] = instrucao_expected_prev[9];
	end
	if (
		( instrucao_expected_prev[10] !== 1'bx ) && ( instrucao_prev[10] !== instrucao_expected_prev[10] )
		&& ((instrucao_expected_prev[10] !== last_instrucao_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[10] = instrucao_expected_prev[10];
	end
	if (
		( instrucao_expected_prev[11] !== 1'bx ) && ( instrucao_prev[11] !== instrucao_expected_prev[11] )
		&& ((instrucao_expected_prev[11] !== last_instrucao_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[11] = instrucao_expected_prev[11];
	end
	if (
		( instrucao_expected_prev[12] !== 1'bx ) && ( instrucao_prev[12] !== instrucao_expected_prev[12] )
		&& ((instrucao_expected_prev[12] !== last_instrucao_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[12] = instrucao_expected_prev[12];
	end
	if (
		( instrucao_expected_prev[13] !== 1'bx ) && ( instrucao_prev[13] !== instrucao_expected_prev[13] )
		&& ((instrucao_expected_prev[13] !== last_instrucao_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[13] = instrucao_expected_prev[13];
	end
	if (
		( instrucao_expected_prev[14] !== 1'bx ) && ( instrucao_prev[14] !== instrucao_expected_prev[14] )
		&& ((instrucao_expected_prev[14] !== last_instrucao_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[14] = instrucao_expected_prev[14];
	end
	if (
		( instrucao_expected_prev[15] !== 1'bx ) && ( instrucao_prev[15] !== instrucao_expected_prev[15] )
		&& ((instrucao_expected_prev[15] !== last_instrucao_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[15] = instrucao_expected_prev[15];
	end
	if (
		( instrucao_expected_prev[16] !== 1'bx ) && ( instrucao_prev[16] !== instrucao_expected_prev[16] )
		&& ((instrucao_expected_prev[16] !== last_instrucao_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[16] = instrucao_expected_prev[16];
	end
	if (
		( instrucao_expected_prev[17] !== 1'bx ) && ( instrucao_prev[17] !== instrucao_expected_prev[17] )
		&& ((instrucao_expected_prev[17] !== last_instrucao_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[17] = instrucao_expected_prev[17];
	end
	if (
		( instrucao_expected_prev[18] !== 1'bx ) && ( instrucao_prev[18] !== instrucao_expected_prev[18] )
		&& ((instrucao_expected_prev[18] !== last_instrucao_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[18] = instrucao_expected_prev[18];
	end
	if (
		( instrucao_expected_prev[19] !== 1'bx ) && ( instrucao_prev[19] !== instrucao_expected_prev[19] )
		&& ((instrucao_expected_prev[19] !== last_instrucao_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[19] = instrucao_expected_prev[19];
	end
	if (
		( instrucao_expected_prev[20] !== 1'bx ) && ( instrucao_prev[20] !== instrucao_expected_prev[20] )
		&& ((instrucao_expected_prev[20] !== last_instrucao_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[20] = instrucao_expected_prev[20];
	end
	if (
		( instrucao_expected_prev[21] !== 1'bx ) && ( instrucao_prev[21] !== instrucao_expected_prev[21] )
		&& ((instrucao_expected_prev[21] !== last_instrucao_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[21] = instrucao_expected_prev[21];
	end
	if (
		( instrucao_expected_prev[22] !== 1'bx ) && ( instrucao_prev[22] !== instrucao_expected_prev[22] )
		&& ((instrucao_expected_prev[22] !== last_instrucao_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[22] = instrucao_expected_prev[22];
	end
	if (
		( instrucao_expected_prev[23] !== 1'bx ) && ( instrucao_prev[23] !== instrucao_expected_prev[23] )
		&& ((instrucao_expected_prev[23] !== last_instrucao_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[23] = instrucao_expected_prev[23];
	end
	if (
		( instrucao_expected_prev[24] !== 1'bx ) && ( instrucao_prev[24] !== instrucao_expected_prev[24] )
		&& ((instrucao_expected_prev[24] !== last_instrucao_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[24] = instrucao_expected_prev[24];
	end
	if (
		( instrucao_expected_prev[25] !== 1'bx ) && ( instrucao_prev[25] !== instrucao_expected_prev[25] )
		&& ((instrucao_expected_prev[25] !== last_instrucao_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[25] = instrucao_expected_prev[25];
	end
	if (
		( instrucao_expected_prev[26] !== 1'bx ) && ( instrucao_prev[26] !== instrucao_expected_prev[26] )
		&& ((instrucao_expected_prev[26] !== last_instrucao_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[26] = instrucao_expected_prev[26];
	end
	if (
		( instrucao_expected_prev[27] !== 1'bx ) && ( instrucao_prev[27] !== instrucao_expected_prev[27] )
		&& ((instrucao_expected_prev[27] !== last_instrucao_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[27] = instrucao_expected_prev[27];
	end
	if (
		( instrucao_expected_prev[28] !== 1'bx ) && ( instrucao_prev[28] !== instrucao_expected_prev[28] )
		&& ((instrucao_expected_prev[28] !== last_instrucao_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[28] = instrucao_expected_prev[28];
	end
	if (
		( instrucao_expected_prev[29] !== 1'bx ) && ( instrucao_prev[29] !== instrucao_expected_prev[29] )
		&& ((instrucao_expected_prev[29] !== last_instrucao_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[29] = instrucao_expected_prev[29];
	end
	if (
		( instrucao_expected_prev[30] !== 1'bx ) && ( instrucao_prev[30] !== instrucao_expected_prev[30] )
		&& ((instrucao_expected_prev[30] !== last_instrucao_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[30] = instrucao_expected_prev[30];
	end
	if (
		( instrucao_expected_prev[31] !== 1'bx ) && ( instrucao_prev[31] !== instrucao_expected_prev[31] )
		&& ((instrucao_expected_prev[31] !== last_instrucao_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instrucao[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instrucao_expected_prev);
		$display ("     Real value = %b", instrucao_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instrucao_exp[31] = instrucao_expected_prev[31];
	end
	if (
		( jump_expected_prev !== 1'bx ) && ( jump_prev !== jump_expected_prev )
		&& ((jump_expected_prev !== last_jump_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jump_exp = jump_expected_prev;
	end
	if (
		( memRead_expected_prev !== 1'bx ) && ( memRead_prev !== memRead_expected_prev )
		&& ((memRead_expected_prev !== last_memRead_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memRead_expected_prev);
		$display ("     Real value = %b", memRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_memRead_exp = memRead_expected_prev;
	end
	if (
		( memWrite_expected_prev !== 1'bx ) && ( memWrite_prev !== memWrite_expected_prev )
		&& ((memWrite_expected_prev !== last_memWrite_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memWrite_expected_prev);
		$display ("     Real value = %b", memWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_memWrite_exp = memWrite_expected_prev;
	end
	if (
		( memtoReg_expected_prev !== 1'bx ) && ( memtoReg_prev !== memtoReg_expected_prev )
		&& ((memtoReg_expected_prev !== last_memtoReg_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memtoReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memtoReg_expected_prev);
		$display ("     Real value = %b", memtoReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_memtoReg_exp = memtoReg_expected_prev;
	end
	if (
		( regDst_expected_prev !== 1'bx ) && ( regDst_prev !== regDst_expected_prev )
		&& ((regDst_expected_prev !== last_regDst_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDst_expected_prev);
		$display ("     Real value = %b", regDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_regDst_exp = regDst_expected_prev;
	end
	if (
		( regWrite_expected_prev !== 1'bx ) && ( regWrite_prev !== regWrite_expected_prev )
		&& ((regWrite_expected_prev !== last_regWrite_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regWrite_expected_prev);
		$display ("     Real value = %b", regWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_regWrite_exp = regWrite_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#16000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_fpga;
reg interrupt;
reg reset;
// wires                                               
wire [1:0] aluOp;
wire aluSrc;
wire branch;
wire [31:0] instrucao;
wire jump;
wire memRead;
wire memWrite;
wire memtoReg;
wire regDst;
wire regWrite;

wire sampler;                             

// assign statements (if any)                          
MIPS i1 (
// port map - connection between master ports and signals/registers   
	.aluOp(aluOp),
	.aluSrc(aluSrc),
	.branch(branch),
	.clk_fpga(clk_fpga),
	.instrucao(instrucao),
	.interrupt(interrupt),
	.jump(jump),
	.memRead(memRead),
	.memWrite(memWrite),
	.memtoReg(memtoReg),
	.regDst(regDst),
	.regWrite(regWrite),
	.reset(reset)
);

// interrupt
initial
begin
	interrupt = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// clk_fpga
initial
begin
	clk_fpga = 1'b1;
	# 1000;
	repeat(7)
	begin
		clk_fpga = 1'b0;
		clk_fpga = #1000 1'b1;
		# 1000;
	end
	clk_fpga = 1'b0;
end 

MIPS_vlg_sample_tst tb_sample (
	.clk_fpga(clk_fpga),
	.interrupt(interrupt),
	.reset(reset),
	.sampler_tx(sampler)
);

MIPS_vlg_check_tst tb_out(
	.aluOp(aluOp),
	.aluSrc(aluSrc),
	.branch(branch),
	.instrucao(instrucao),
	.jump(jump),
	.memRead(memRead),
	.memWrite(memWrite),
	.memtoReg(memtoReg),
	.regDst(regDst),
	.regWrite(regWrite),
	.sampler_rx(sampler)
);
endmodule

