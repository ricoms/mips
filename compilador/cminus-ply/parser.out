Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     var_declaration -> type_specifier ID SEMICOLON
Rule 7     var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 8     type_specifier -> INT
Rule 9     type_specifier -> VOID
Rule 10    fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt
Rule 11    params -> param_list
Rule 12    params -> VOID
Rule 13    param_list -> param_list COMMA param
Rule 14    param_list -> param
Rule 15    param_list -> empty
Rule 16    param -> type_specifier ID
Rule 17    param -> type_specifier ID LBRACKET RBRACKET
Rule 18    compound_stmt -> LBRACE local_declarations statement_list RBRACE
Rule 19    local_declarations -> local_declarations var_declaration
Rule 20    local_declarations -> empty
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> empty
Rule 23    statement -> expression_stmt
Rule 24    statement -> compound_stmt
Rule 25    statement -> selection_stmt
Rule 26    statement -> iteration_stmt
Rule 27    statement -> return_stmt
Rule 28    expression_stmt -> expression SEMICOLON
Rule 29    expression_stmt -> SEMICOLON
Rule 30    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 31    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 32    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 33    return_stmt -> RETURN SEMICOLON
Rule 34    return_stmt -> RETURN expression SEMICOLON
Rule 35    expression -> var ASSIGN expression
Rule 36    expression -> simple_expression
Rule 37    var -> ID
Rule 38    var -> ID LBRACKET expression RBRACKET
Rule 39    simple_expression -> additive_expression relop additive_expression
Rule 40    simple_expression -> additive_expression
Rule 41    relop -> LESS
Rule 42    relop -> LESSEQUAL
Rule 43    relop -> GREATER
Rule 44    relop -> GREATEREQUAL
Rule 45    relop -> EQUAL
Rule 46    relop -> NEQUAL
Rule 47    additive_expression -> additive_expression addop term
Rule 48    additive_expression -> term
Rule 49    addop -> PLUS
Rule 50    addop -> MINUS
Rule 51    term -> term mulop factor
Rule 52    term -> factor
Rule 53    mulop -> TIMES
Rule 54    mulop -> DIVIDE
Rule 55    factor -> LPAREN expression RPAREN
Rule 56    factor -> var
Rule 57    factor -> call
Rule 58    factor -> NUMBER
Rule 59    call -> ID LPAREN args RPAREN
Rule 60    args -> args_list
Rule 61    args -> empty
Rule 62    args_list -> args_list COMMA expression
Rule 63    args_list -> expression
Rule 64    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 35
COMMA                : 13 62
DIVIDE               : 54
ELSE                 : 31
EQUAL                : 45
GREATER              : 43
GREATEREQUAL         : 44
ID                   : 6 7 10 16 17 37 38 59
IF                   : 30 31
INT                  : 8
LBRACE               : 18
LBRACKET             : 7 17 38
LESS                 : 41
LESSEQUAL            : 42
LPAREN               : 10 30 31 32 55 59
MINUS                : 50
NEQUAL               : 46
NUMBER               : 7 58
PLUS                 : 49
RBRACE               : 18
RBRACKET             : 7 17 38
RETURN               : 33 34
RPAREN               : 10 30 31 32 55 59
SEMICOLON            : 6 7 28 29 33 34
TIMES                : 53
VOID                 : 9 12
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

additive_expression  : 39 39 40 47
addop                : 47
args                 : 59
args_list            : 60 62
call                 : 57
compound_stmt        : 10 24
declaration          : 2 3
declaration_list     : 1 2
empty                : 15 20 22 61
expression           : 28 30 31 32 34 35 38 55 62 63
expression_stmt      : 23
factor               : 51 52
fun_declaration      : 5
iteration_stmt       : 26
local_declarations   : 18 19
mulop                : 51
param                : 13 14
param_list           : 11 13
params               : 10
program              : 0
relop                : 39
return_stmt          : 27
selection_stmt       : 25
simple_expression    : 36
statement            : 21 30 31 31 32
statement_list       : 18 21
term                 : 47 48 51
type_specifier       : 6 7 10 16 17
var                  : 35 56
var_declaration      : 4 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (10) fun_declaration -> . type_specifier ID LPAREN params RPAREN compound_stmt
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    INT             shift and go to state 7
    VOID            shift and go to state 1

    fun_declaration                shift and go to state 6
    declaration                    shift and go to state 2
    program                        shift and go to state 3
    type_specifier                 shift and go to state 8
    declaration_list               shift and go to state 4
    var_declaration                shift and go to state 5

state 1

    (9) type_specifier -> VOID .

    ID              reduce using rule 9 (type_specifier -> VOID .)


state 2

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    VOID            reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 3

    (0) S' -> program .



state 4

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (10) fun_declaration -> . type_specifier ID LPAREN params RPAREN compound_stmt
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 7
    VOID            shift and go to state 1

    fun_declaration                shift and go to state 6
    declaration                    shift and go to state 9
    type_specifier                 shift and go to state 8
    var_declaration                shift and go to state 5

state 5

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> fun_declaration .

    INT             reduce using rule 5 (declaration -> fun_declaration .)
    VOID            reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 7

    (8) type_specifier -> INT .

    ID              reduce using rule 8 (type_specifier -> INT .)


state 8

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (10) fun_declaration -> type_specifier . ID LPAREN params RPAREN compound_stmt

    ID              shift and go to state 10


state 9

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 10

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (10) fun_declaration -> type_specifier ID . LPAREN params RPAREN compound_stmt

    SEMICOLON       shift and go to state 13
    LBRACKET        shift and go to state 12
    LPAREN          shift and go to state 11


state 11

    (10) fun_declaration -> type_specifier ID LPAREN . params RPAREN compound_stmt
    (11) params -> . param_list
    (12) params -> . VOID
    (13) param_list -> . param_list COMMA param
    (14) param_list -> . param
    (15) param_list -> . empty
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (64) empty -> .
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    VOID            shift and go to state 15
    COMMA           reduce using rule 64 (empty -> .)
    RPAREN          reduce using rule 64 (empty -> .)
    INT             shift and go to state 7

    params                         shift and go to state 17
    param_list                     shift and go to state 14
    param                          shift and go to state 18
    type_specifier                 shift and go to state 19
    empty                          shift and go to state 16

state 12

    (7) var_declaration -> type_specifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 20


state 13

    (6) var_declaration -> type_specifier ID SEMICOLON .

    INT             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    VOID            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RBRACE          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    SEMICOLON       reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LBRACE          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    NUMBER          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)


state 14

    (11) params -> param_list .
    (13) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 11 (params -> param_list .)
    COMMA           shift and go to state 21


state 15

    (12) params -> VOID .
    (9) type_specifier -> VOID .

    RPAREN          reduce using rule 12 (params -> VOID .)
    ID              reduce using rule 9 (type_specifier -> VOID .)


state 16

    (15) param_list -> empty .

    COMMA           reduce using rule 15 (param_list -> empty .)
    RPAREN          reduce using rule 15 (param_list -> empty .)


state 17

    (10) fun_declaration -> type_specifier ID LPAREN params . RPAREN compound_stmt

    RPAREN          shift and go to state 22


state 18

    (14) param_list -> param .

    COMMA           reduce using rule 14 (param_list -> param .)
    RPAREN          reduce using rule 14 (param_list -> param .)


state 19

    (16) param -> type_specifier . ID
    (17) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 23


state 20

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 24


state 21

    (13) param_list -> param_list COMMA . param
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    INT             shift and go to state 7
    VOID            shift and go to state 1

    param                          shift and go to state 25
    type_specifier                 shift and go to state 19

state 22

    (10) fun_declaration -> type_specifier ID LPAREN params RPAREN . compound_stmt
    (18) compound_stmt -> . LBRACE local_declarations statement_list RBRACE

    LBRACE          shift and go to state 27

    compound_stmt                  shift and go to state 26

state 23

    (16) param -> type_specifier ID .
    (17) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 16 (param -> type_specifier ID .)
    RPAREN          reduce using rule 16 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 28


state 24

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 29


state 25

    (13) param_list -> param_list COMMA param .

    COMMA           reduce using rule 13 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 13 (param_list -> param_list COMMA param .)


state 26

    (10) fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt .

    INT             reduce using rule 10 (fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt .)
    VOID            reduce using rule 10 (fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt .)
    $end            reduce using rule 10 (fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt .)


state 27

    (18) compound_stmt -> LBRACE . local_declarations statement_list RBRACE
    (19) local_declarations -> . local_declarations var_declaration
    (20) local_declarations -> . empty
    (64) empty -> .

    INT             reduce using rule 64 (empty -> .)
    VOID            reduce using rule 64 (empty -> .)
    RBRACE          reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)
    LBRACE          reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    LPAREN          reduce using rule 64 (empty -> .)
    NUMBER          reduce using rule 64 (empty -> .)

    empty                          shift and go to state 30
    local_declarations             shift and go to state 31

state 28

    (17) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 32


state 29

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    INT             reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 30

    (20) local_declarations -> empty .

    INT             reduce using rule 20 (local_declarations -> empty .)
    VOID            reduce using rule 20 (local_declarations -> empty .)
    RBRACE          reduce using rule 20 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 20 (local_declarations -> empty .)
    LBRACE          reduce using rule 20 (local_declarations -> empty .)
    IF              reduce using rule 20 (local_declarations -> empty .)
    WHILE           reduce using rule 20 (local_declarations -> empty .)
    RETURN          reduce using rule 20 (local_declarations -> empty .)
    ID              reduce using rule 20 (local_declarations -> empty .)
    LPAREN          reduce using rule 20 (local_declarations -> empty .)
    NUMBER          reduce using rule 20 (local_declarations -> empty .)


state 31

    (18) compound_stmt -> LBRACE local_declarations . statement_list RBRACE
    (19) local_declarations -> local_declarations . var_declaration
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . empty
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (64) empty -> .
    (8) type_specifier -> . INT
    (9) type_specifier -> . VOID

    RBRACE          reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)
    LBRACE          reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    RETURN          reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    LPAREN          reduce using rule 64 (empty -> .)
    NUMBER          reduce using rule 64 (empty -> .)
    INT             shift and go to state 7
    VOID            shift and go to state 1

    type_specifier                 shift and go to state 34
    statement_list                 shift and go to state 36
    empty                          shift and go to state 33
    var_declaration                shift and go to state 35

state 32

    (17) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)


state 33

    (22) statement_list -> empty .

    RBRACE          reduce using rule 22 (statement_list -> empty .)
    SEMICOLON       reduce using rule 22 (statement_list -> empty .)
    LBRACE          reduce using rule 22 (statement_list -> empty .)
    IF              reduce using rule 22 (statement_list -> empty .)
    WHILE           reduce using rule 22 (statement_list -> empty .)
    RETURN          reduce using rule 22 (statement_list -> empty .)
    ID              reduce using rule 22 (statement_list -> empty .)
    LPAREN          reduce using rule 22 (statement_list -> empty .)
    NUMBER          reduce using rule 22 (statement_list -> empty .)


state 34

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID              shift and go to state 37


state 35

    (19) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RBRACE          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    LBRACE          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)


state 36

    (18) compound_stmt -> LBRACE local_declarations statement_list . RBRACE
    (21) statement_list -> statement_list . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    RBRACE          shift and go to state 48
    SEMICOLON       shift and go to state 57
    LBRACE          shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 44
    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    expression_stmt                shift and go to state 38
    compound_stmt                  shift and go to state 50
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 42
    term                           shift and go to state 56
    selection_stmt                 shift and go to state 49
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    iteration_stmt                 shift and go to state 58
    statement                      shift and go to state 47
    return_stmt                    shift and go to state 46

state 37

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON       shift and go to state 13
    LBRACKET        shift and go to state 12


state 38

    (23) statement -> expression_stmt .

    RBRACE          reduce using rule 23 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 23 (statement -> expression_stmt .)
    LBRACE          reduce using rule 23 (statement -> expression_stmt .)
    IF              reduce using rule 23 (statement -> expression_stmt .)
    WHILE           reduce using rule 23 (statement -> expression_stmt .)
    RETURN          reduce using rule 23 (statement -> expression_stmt .)
    ID              reduce using rule 23 (statement -> expression_stmt .)
    LPAREN          reduce using rule 23 (statement -> expression_stmt .)
    NUMBER          reduce using rule 23 (statement -> expression_stmt .)
    ELSE            reduce using rule 23 (statement -> expression_stmt .)


state 39

    (55) factor -> LPAREN . expression RPAREN
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    term                           shift and go to state 56
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 59

state 40

    (39) simple_expression -> additive_expression . relop additive_expression
    (40) simple_expression -> additive_expression .
    (47) additive_expression -> additive_expression . addop term
    (41) relop -> . LESS
    (42) relop -> . LESSEQUAL
    (43) relop -> . GREATER
    (44) relop -> . GREATEREQUAL
    (45) relop -> . EQUAL
    (46) relop -> . NEQUAL
    (49) addop -> . PLUS
    (50) addop -> . MINUS

    RPAREN          reduce using rule 40 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 40 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 40 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 40 (simple_expression -> additive_expression .)
    LESS            shift and go to state 62
    LESSEQUAL       shift and go to state 64
    GREATER         shift and go to state 61
    GREATEREQUAL    shift and go to state 66
    EQUAL           shift and go to state 60
    NEQUAL          shift and go to state 65
    PLUS            shift and go to state 67
    MINUS           shift and go to state 69

    relop                          shift and go to state 68
    addop                          shift and go to state 63

state 41

    (57) factor -> call .

    TIMES           reduce using rule 57 (factor -> call .)
    DIVIDE          reduce using rule 57 (factor -> call .)
    LESS            reduce using rule 57 (factor -> call .)
    LESSEQUAL       reduce using rule 57 (factor -> call .)
    GREATER         reduce using rule 57 (factor -> call .)
    GREATEREQUAL    reduce using rule 57 (factor -> call .)
    EQUAL           reduce using rule 57 (factor -> call .)
    NEQUAL          reduce using rule 57 (factor -> call .)
    PLUS            reduce using rule 57 (factor -> call .)
    MINUS           reduce using rule 57 (factor -> call .)
    SEMICOLON       reduce using rule 57 (factor -> call .)
    RPAREN          reduce using rule 57 (factor -> call .)
    COMMA           reduce using rule 57 (factor -> call .)
    RBRACKET        reduce using rule 57 (factor -> call .)


state 42

    (28) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 70


state 43

    (30) selection_stmt -> IF . LPAREN expression RPAREN statement
    (31) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 71


state 44

    (33) return_stmt -> RETURN . SEMICOLON
    (34) return_stmt -> RETURN . expression SEMICOLON
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 73
    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    term                           shift and go to state 56
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 72

state 45

    (32) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 74


state 46

    (27) statement -> return_stmt .

    RBRACE          reduce using rule 27 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 27 (statement -> return_stmt .)
    LBRACE          reduce using rule 27 (statement -> return_stmt .)
    IF              reduce using rule 27 (statement -> return_stmt .)
    WHILE           reduce using rule 27 (statement -> return_stmt .)
    RETURN          reduce using rule 27 (statement -> return_stmt .)
    ID              reduce using rule 27 (statement -> return_stmt .)
    LPAREN          reduce using rule 27 (statement -> return_stmt .)
    NUMBER          reduce using rule 27 (statement -> return_stmt .)
    ELSE            reduce using rule 27 (statement -> return_stmt .)


state 47

    (21) statement_list -> statement_list statement .

    RBRACE          reduce using rule 21 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 21 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 21 (statement_list -> statement_list statement .)
    IF              reduce using rule 21 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 21 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 21 (statement_list -> statement_list statement .)
    ID              reduce using rule 21 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 21 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 21 (statement_list -> statement_list statement .)


state 48

    (18) compound_stmt -> LBRACE local_declarations statement_list RBRACE .

    ELSE            reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    RBRACE          reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    SEMICOLON       reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    LBRACE          reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    IF              reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    WHILE           reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    RETURN          reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    ID              reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    LPAREN          reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    NUMBER          reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    INT             reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    VOID            reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)
    $end            reduce using rule 18 (compound_stmt -> LBRACE local_declarations statement_list RBRACE .)


state 49

    (25) statement -> selection_stmt .

    RBRACE          reduce using rule 25 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 25 (statement -> selection_stmt .)
    LBRACE          reduce using rule 25 (statement -> selection_stmt .)
    IF              reduce using rule 25 (statement -> selection_stmt .)
    WHILE           reduce using rule 25 (statement -> selection_stmt .)
    RETURN          reduce using rule 25 (statement -> selection_stmt .)
    ID              reduce using rule 25 (statement -> selection_stmt .)
    LPAREN          reduce using rule 25 (statement -> selection_stmt .)
    NUMBER          reduce using rule 25 (statement -> selection_stmt .)
    ELSE            reduce using rule 25 (statement -> selection_stmt .)


state 50

    (24) statement -> compound_stmt .

    RBRACE          reduce using rule 24 (statement -> compound_stmt .)
    SEMICOLON       reduce using rule 24 (statement -> compound_stmt .)
    LBRACE          reduce using rule 24 (statement -> compound_stmt .)
    IF              reduce using rule 24 (statement -> compound_stmt .)
    WHILE           reduce using rule 24 (statement -> compound_stmt .)
    RETURN          reduce using rule 24 (statement -> compound_stmt .)
    ID              reduce using rule 24 (statement -> compound_stmt .)
    LPAREN          reduce using rule 24 (statement -> compound_stmt .)
    NUMBER          reduce using rule 24 (statement -> compound_stmt .)
    ELSE            reduce using rule 24 (statement -> compound_stmt .)


state 51

    (37) var -> ID .
    (38) var -> ID . LBRACKET expression RBRACKET
    (59) call -> ID . LPAREN args RPAREN

    ASSIGN          reduce using rule 37 (var -> ID .)
    TIMES           reduce using rule 37 (var -> ID .)
    DIVIDE          reduce using rule 37 (var -> ID .)
    LESS            reduce using rule 37 (var -> ID .)
    LESSEQUAL       reduce using rule 37 (var -> ID .)
    GREATER         reduce using rule 37 (var -> ID .)
    GREATEREQUAL    reduce using rule 37 (var -> ID .)
    EQUAL           reduce using rule 37 (var -> ID .)
    NEQUAL          reduce using rule 37 (var -> ID .)
    PLUS            reduce using rule 37 (var -> ID .)
    MINUS           reduce using rule 37 (var -> ID .)
    SEMICOLON       reduce using rule 37 (var -> ID .)
    RPAREN          reduce using rule 37 (var -> ID .)
    COMMA           reduce using rule 37 (var -> ID .)
    RBRACKET        reduce using rule 37 (var -> ID .)
    LBRACKET        shift and go to state 76
    LPAREN          shift and go to state 75


state 52

    (58) factor -> NUMBER .

    TIMES           reduce using rule 58 (factor -> NUMBER .)
    DIVIDE          reduce using rule 58 (factor -> NUMBER .)
    LESS            reduce using rule 58 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 58 (factor -> NUMBER .)
    GREATER         reduce using rule 58 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 58 (factor -> NUMBER .)
    EQUAL           reduce using rule 58 (factor -> NUMBER .)
    NEQUAL          reduce using rule 58 (factor -> NUMBER .)
    PLUS            reduce using rule 58 (factor -> NUMBER .)
    MINUS           reduce using rule 58 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 58 (factor -> NUMBER .)
    RPAREN          reduce using rule 58 (factor -> NUMBER .)
    COMMA           reduce using rule 58 (factor -> NUMBER .)
    RBRACKET        reduce using rule 58 (factor -> NUMBER .)


state 53

    (52) term -> factor .

    TIMES           reduce using rule 52 (term -> factor .)
    DIVIDE          reduce using rule 52 (term -> factor .)
    LESS            reduce using rule 52 (term -> factor .)
    LESSEQUAL       reduce using rule 52 (term -> factor .)
    GREATER         reduce using rule 52 (term -> factor .)
    GREATEREQUAL    reduce using rule 52 (term -> factor .)
    EQUAL           reduce using rule 52 (term -> factor .)
    NEQUAL          reduce using rule 52 (term -> factor .)
    PLUS            reduce using rule 52 (term -> factor .)
    MINUS           reduce using rule 52 (term -> factor .)
    COMMA           reduce using rule 52 (term -> factor .)
    RPAREN          reduce using rule 52 (term -> factor .)
    SEMICOLON       reduce using rule 52 (term -> factor .)
    RBRACKET        reduce using rule 52 (term -> factor .)


state 54

    (35) expression -> var . ASSIGN expression
    (56) factor -> var .

    ASSIGN          shift and go to state 77
    TIMES           reduce using rule 56 (factor -> var .)
    DIVIDE          reduce using rule 56 (factor -> var .)
    LESS            reduce using rule 56 (factor -> var .)
    LESSEQUAL       reduce using rule 56 (factor -> var .)
    GREATER         reduce using rule 56 (factor -> var .)
    GREATEREQUAL    reduce using rule 56 (factor -> var .)
    EQUAL           reduce using rule 56 (factor -> var .)
    NEQUAL          reduce using rule 56 (factor -> var .)
    PLUS            reduce using rule 56 (factor -> var .)
    MINUS           reduce using rule 56 (factor -> var .)
    SEMICOLON       reduce using rule 56 (factor -> var .)
    RPAREN          reduce using rule 56 (factor -> var .)
    COMMA           reduce using rule 56 (factor -> var .)
    RBRACKET        reduce using rule 56 (factor -> var .)


state 55

    (36) expression -> simple_expression .

    SEMICOLON       reduce using rule 36 (expression -> simple_expression .)
    COMMA           reduce using rule 36 (expression -> simple_expression .)
    RPAREN          reduce using rule 36 (expression -> simple_expression .)
    RBRACKET        reduce using rule 36 (expression -> simple_expression .)


state 56

    (48) additive_expression -> term .
    (51) term -> term . mulop factor
    (53) mulop -> . TIMES
    (54) mulop -> . DIVIDE

    LESS            reduce using rule 48 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 48 (additive_expression -> term .)
    GREATER         reduce using rule 48 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 48 (additive_expression -> term .)
    EQUAL           reduce using rule 48 (additive_expression -> term .)
    NEQUAL          reduce using rule 48 (additive_expression -> term .)
    PLUS            reduce using rule 48 (additive_expression -> term .)
    MINUS           reduce using rule 48 (additive_expression -> term .)
    COMMA           reduce using rule 48 (additive_expression -> term .)
    RPAREN          reduce using rule 48 (additive_expression -> term .)
    RBRACKET        reduce using rule 48 (additive_expression -> term .)
    SEMICOLON       reduce using rule 48 (additive_expression -> term .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 78

    mulop                          shift and go to state 79

state 57

    (29) expression_stmt -> SEMICOLON .

    ELSE            reduce using rule 29 (expression_stmt -> SEMICOLON .)
    RBRACE          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 29 (expression_stmt -> SEMICOLON .)
    LBRACE          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 29 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 29 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 29 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 29 (expression_stmt -> SEMICOLON .)


state 58

    (26) statement -> iteration_stmt .

    RBRACE          reduce using rule 26 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 26 (statement -> iteration_stmt .)
    LBRACE          reduce using rule 26 (statement -> iteration_stmt .)
    IF              reduce using rule 26 (statement -> iteration_stmt .)
    WHILE           reduce using rule 26 (statement -> iteration_stmt .)
    RETURN          reduce using rule 26 (statement -> iteration_stmt .)
    ID              reduce using rule 26 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 26 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 26 (statement -> iteration_stmt .)
    ELSE            reduce using rule 26 (statement -> iteration_stmt .)


state 59

    (55) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 81


state 60

    (45) relop -> EQUAL .

    LPAREN          reduce using rule 45 (relop -> EQUAL .)
    NUMBER          reduce using rule 45 (relop -> EQUAL .)
    ID              reduce using rule 45 (relop -> EQUAL .)


state 61

    (43) relop -> GREATER .

    LPAREN          reduce using rule 43 (relop -> GREATER .)
    NUMBER          reduce using rule 43 (relop -> GREATER .)
    ID              reduce using rule 43 (relop -> GREATER .)


state 62

    (41) relop -> LESS .

    LPAREN          reduce using rule 41 (relop -> LESS .)
    NUMBER          reduce using rule 41 (relop -> LESS .)
    ID              reduce using rule 41 (relop -> LESS .)


state 63

    (47) additive_expression -> additive_expression addop . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (59) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52
    ID              shift and go to state 51

    factor                         shift and go to state 53
    var                            shift and go to state 82
    term                           shift and go to state 83
    call                           shift and go to state 41

state 64

    (42) relop -> LESSEQUAL .

    LPAREN          reduce using rule 42 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 42 (relop -> LESSEQUAL .)
    ID              reduce using rule 42 (relop -> LESSEQUAL .)


state 65

    (46) relop -> NEQUAL .

    LPAREN          reduce using rule 46 (relop -> NEQUAL .)
    NUMBER          reduce using rule 46 (relop -> NEQUAL .)
    ID              reduce using rule 46 (relop -> NEQUAL .)


state 66

    (44) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 44 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 44 (relop -> GREATEREQUAL .)
    ID              reduce using rule 44 (relop -> GREATEREQUAL .)


state 67

    (49) addop -> PLUS .

    LPAREN          reduce using rule 49 (addop -> PLUS .)
    NUMBER          reduce using rule 49 (addop -> PLUS .)
    ID              reduce using rule 49 (addop -> PLUS .)


state 68

    (39) simple_expression -> additive_expression relop . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (59) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52
    ID              shift and go to state 51

    factor                         shift and go to state 53
    var                            shift and go to state 82
    term                           shift and go to state 56
    call                           shift and go to state 41
    additive_expression            shift and go to state 84

state 69

    (50) addop -> MINUS .

    LPAREN          reduce using rule 50 (addop -> MINUS .)
    NUMBER          reduce using rule 50 (addop -> MINUS .)
    ID              reduce using rule 50 (addop -> MINUS .)


state 70

    (28) expression_stmt -> expression SEMICOLON .

    ELSE            reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    RBRACE          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    LBRACE          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)


state 71

    (30) selection_stmt -> IF LPAREN . expression RPAREN statement
    (31) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    term                           shift and go to state 56
    expression                     shift and go to state 85

state 72

    (34) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 86


state 73

    (33) return_stmt -> RETURN SEMICOLON .

    ELSE            reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)


state 74

    (32) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    term                           shift and go to state 56
    expression                     shift and go to state 87

state 75

    (59) call -> ID LPAREN . args RPAREN
    (60) args -> . args_list
    (61) args -> . empty
    (62) args_list -> . args_list COMMA expression
    (63) args_list -> . expression
    (64) empty -> .
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 64 (empty -> .)
    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    args                           shift and go to state 88
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    args_list                      shift and go to state 90
    empty                          shift and go to state 91
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    term                           shift and go to state 56
    expression                     shift and go to state 89

state 76

    (38) var -> ID LBRACKET . expression RBRACKET
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    term                           shift and go to state 56
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 92

state 77

    (35) expression -> var ASSIGN . expression
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    term                           shift and go to state 56
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 93

state 78

    (54) mulop -> DIVIDE .

    LPAREN          reduce using rule 54 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 54 (mulop -> DIVIDE .)
    ID              reduce using rule 54 (mulop -> DIVIDE .)


state 79

    (51) term -> term mulop . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (59) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52
    ID              shift and go to state 51

    factor                         shift and go to state 94
    var                            shift and go to state 82
    call                           shift and go to state 41

state 80

    (53) mulop -> TIMES .

    LPAREN          reduce using rule 53 (mulop -> TIMES .)
    NUMBER          reduce using rule 53 (mulop -> TIMES .)
    ID              reduce using rule 53 (mulop -> TIMES .)


state 81

    (55) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 55 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 55 (factor -> LPAREN expression RPAREN .)


state 82

    (56) factor -> var .

    TIMES           reduce using rule 56 (factor -> var .)
    DIVIDE          reduce using rule 56 (factor -> var .)
    LESS            reduce using rule 56 (factor -> var .)
    LESSEQUAL       reduce using rule 56 (factor -> var .)
    GREATER         reduce using rule 56 (factor -> var .)
    GREATEREQUAL    reduce using rule 56 (factor -> var .)
    EQUAL           reduce using rule 56 (factor -> var .)
    NEQUAL          reduce using rule 56 (factor -> var .)
    PLUS            reduce using rule 56 (factor -> var .)
    MINUS           reduce using rule 56 (factor -> var .)
    SEMICOLON       reduce using rule 56 (factor -> var .)
    RPAREN          reduce using rule 56 (factor -> var .)
    COMMA           reduce using rule 56 (factor -> var .)
    RBRACKET        reduce using rule 56 (factor -> var .)


state 83

    (47) additive_expression -> additive_expression addop term .
    (51) term -> term . mulop factor
    (53) mulop -> . TIMES
    (54) mulop -> . DIVIDE

    LESS            reduce using rule 47 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 47 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 47 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 47 (additive_expression -> additive_expression addop term .)
    EQUAL           reduce using rule 47 (additive_expression -> additive_expression addop term .)
    NEQUAL          reduce using rule 47 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 47 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 47 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 47 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 47 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 47 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 47 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 80
    DIVIDE          shift and go to state 78

    mulop                          shift and go to state 79

state 84

    (39) simple_expression -> additive_expression relop additive_expression .
    (47) additive_expression -> additive_expression . addop term
    (49) addop -> . PLUS
    (50) addop -> . MINUS

    RPAREN          reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 69

    addop                          shift and go to state 63

state 85

    (30) selection_stmt -> IF LPAREN expression . RPAREN statement
    (31) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 95


state 86

    (34) return_stmt -> RETURN expression SEMICOLON .

    ELSE            reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)


state 87

    (32) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 96


state 88

    (59) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 97


state 89

    (63) args_list -> expression .

    COMMA           reduce using rule 63 (args_list -> expression .)
    RPAREN          reduce using rule 63 (args_list -> expression .)


state 90

    (60) args -> args_list .
    (62) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 60 (args -> args_list .)
    COMMA           shift and go to state 98


state 91

    (61) args -> empty .

    RPAREN          reduce using rule 61 (args -> empty .)


state 92

    (38) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 99


state 93

    (35) expression -> var ASSIGN expression .

    SEMICOLON       reduce using rule 35 (expression -> var ASSIGN expression .)
    COMMA           reduce using rule 35 (expression -> var ASSIGN expression .)
    RPAREN          reduce using rule 35 (expression -> var ASSIGN expression .)
    RBRACKET        reduce using rule 35 (expression -> var ASSIGN expression .)


state 94

    (51) term -> term mulop factor .

    TIMES           reduce using rule 51 (term -> term mulop factor .)
    DIVIDE          reduce using rule 51 (term -> term mulop factor .)
    LESS            reduce using rule 51 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 51 (term -> term mulop factor .)
    GREATER         reduce using rule 51 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 51 (term -> term mulop factor .)
    EQUAL           reduce using rule 51 (term -> term mulop factor .)
    NEQUAL          reduce using rule 51 (term -> term mulop factor .)
    PLUS            reduce using rule 51 (term -> term mulop factor .)
    MINUS           reduce using rule 51 (term -> term mulop factor .)
    COMMA           reduce using rule 51 (term -> term mulop factor .)
    RPAREN          reduce using rule 51 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 51 (term -> term mulop factor .)
    RBRACKET        reduce using rule 51 (term -> term mulop factor .)


state 95

    (30) selection_stmt -> IF LPAREN expression RPAREN . statement
    (31) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 57
    LBRACE          shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 44
    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    selection_stmt                 shift and go to state 49
    compound_stmt                  shift and go to state 50
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 42
    term                           shift and go to state 56
    expression_stmt                shift and go to state 38
    factor                         shift and go to state 53
    return_stmt                    shift and go to state 46
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    statement                      shift and go to state 100
    iteration_stmt                 shift and go to state 58

state 96

    (32) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 57
    LBRACE          shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 44
    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    selection_stmt                 shift and go to state 49
    compound_stmt                  shift and go to state 50
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 42
    term                           shift and go to state 56
    expression_stmt                shift and go to state 38
    factor                         shift and go to state 53
    return_stmt                    shift and go to state 46
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    statement                      shift and go to state 101
    iteration_stmt                 shift and go to state 58

state 97

    (59) call -> ID LPAREN args RPAREN .

    TIMES           reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    EQUAL           reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    NEQUAL          reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 59 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 59 (call -> ID LPAREN args RPAREN .)


state 98

    (62) args_list -> args_list COMMA . expression
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    factor                         shift and go to state 53
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    term                           shift and go to state 56
    expression                     shift and go to state 102

state 99

    (38) var -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    NEQUAL          reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)


state 100

    (30) selection_stmt -> IF LPAREN expression RPAREN statement .
    (31) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 103

  ! ELSE            [ reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 101

    (32) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    ELSE            reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 102

    (62) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 62 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 62 (args_list -> args_list COMMA expression .)


state 103

    (31) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compound_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compound_stmt -> . LBRACE local_declarations statement_list RBRACE
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var ASSIGN expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (47) additive_expression -> . additive_expression addop term
    (48) additive_expression -> . term
    (51) term -> . term mulop factor
    (52) term -> . factor
    (55) factor -> . LPAREN expression RPAREN
    (56) factor -> . var
    (57) factor -> . call
    (58) factor -> . NUMBER
    (59) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 57
    LBRACE          shift and go to state 27
    IF              shift and go to state 43
    WHILE           shift and go to state 45
    RETURN          shift and go to state 44
    ID              shift and go to state 51
    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 52

    selection_stmt                 shift and go to state 49
    compound_stmt                  shift and go to state 50
    additive_expression            shift and go to state 40
    call                           shift and go to state 41
    expression                     shift and go to state 42
    term                           shift and go to state 56
    expression_stmt                shift and go to state 38
    factor                         shift and go to state 53
    return_stmt                    shift and go to state 46
    var                            shift and go to state 54
    simple_expression              shift and go to state 55
    statement                      shift and go to state 104
    iteration_stmt                 shift and go to state 58

state 104

    (31) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    ELSE            reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 100 resolved as shift
