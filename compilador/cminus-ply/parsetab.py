
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ELSE IF INT RETURN VOID WHILE PLUS MINUS TIMES DIVIDE LESS LESSEQUAL GREATER GREATEREQUAL EQUAL NEQUAL ASSIGN SEMICOLON COMMA LPAREN RPAREN LBRACKET RBRACKET LBRACE RBRACE ID NUMBERprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declaration\n                        | fun_declarationvar_declaration : type_specifier ID SEMICOLONvar_declaration : type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONtype_specifier : INTtype_specifier : VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_listparams : VOIDparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDparam : type_specifier ID LBRACKET RBRACKETcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n                    | compound_stmt\n                    | selection_stmt\n                    | iteration_stmt\n                    | return_stmt\n    expression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONselection_stmt : IF LPAREN expression RPAREN statementselection_stmt : IF LPAREN expression RPAREN statement ELSE statementiteration_stmt : WHILE LPAREN expression RPAREN statementreturn_stmt : RETURN SEMICOLONreturn_stmt : RETURN expression SEMICOLONexpression : var ASSIGN expressionexpression : simple_expressionvar : IDvar : ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS\n                | LESSEQUAL\n                | GREATER\n                | GREATEREQUAL\n                | EQUAL\n                | NEQUAL\n    additive_expression : additive_expression addop termadditive_expression : term addop : PLUS\n                | MINUS\n    term : term mulop factorterm : factor mulop : TIMES\n                | DIVIDE\n    factor : LPAREN expression RPARENfactor : varfactor : callfactor : NUMBERcall : ID LPAREN args RPAREN args : args_list\n                | empty\n    args_list : args_list COMMA expressionargs_list : expressionempty :'
    
_lr_action_items = {'GREATER':([40,41,51,52,53,54,56,81,82,83,94,97,99,],[61,-57,-37,-58,-52,-56,-48,-55,-56,-47,-51,-59,-38,]),'LPAREN':([10,13,27,29,30,31,33,35,36,38,39,43,44,45,46,47,48,49,50,51,57,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,86,95,96,98,100,101,103,104,],[11,-6,-64,-7,-20,-64,-22,-19,39,-23,39,71,39,74,-27,-21,-18,-25,-24,75,-29,-26,-45,-43,-41,39,-42,-46,-44,-49,39,-50,-28,39,-33,39,39,39,39,-54,39,-53,-34,39,39,39,-30,-32,39,-31,]),'IF':([13,27,29,30,31,33,35,36,38,46,47,48,49,50,57,58,70,73,86,95,96,100,101,103,104,],[-6,-64,-7,-20,-64,-22,-19,43,-23,-27,-21,-18,-25,-24,-29,-26,-28,-33,-34,43,43,-30,-32,43,-31,]),'RETURN':([13,27,29,30,31,33,35,36,38,46,47,48,49,50,57,58,70,73,86,95,96,100,101,103,104,],[-6,-64,-7,-20,-64,-22,-19,44,-23,-27,-21,-18,-25,-24,-29,-26,-28,-33,-34,44,44,-30,-32,44,-31,]),'NEQUAL':([40,41,51,52,53,54,56,81,82,83,94,97,99,],[65,-57,-37,-58,-52,-56,-48,-55,-56,-47,-51,-59,-38,]),'MINUS':([40,41,51,52,53,54,56,81,82,83,84,94,97,99,],[69,-57,-37,-58,-52,-56,-48,-55,-56,-47,69,-51,-59,-38,]),'WHILE':([13,27,29,30,31,33,35,36,38,46,47,48,49,50,57,58,70,73,86,95,96,100,101,103,104,],[-6,-64,-7,-20,-64,-22,-19,45,-23,-27,-21,-18,-25,-24,-29,-26,-28,-33,-34,45,45,-30,-32,45,-31,]),'$end':([2,3,4,5,6,9,13,26,29,48,],[-3,0,-1,-4,-5,-2,-6,-10,-7,-18,]),'EQUAL':([40,41,51,52,53,54,56,81,82,83,94,97,99,],[60,-57,-37,-58,-52,-56,-48,-55,-56,-47,-51,-59,-38,]),'COMMA':([11,14,16,18,23,25,32,40,41,51,52,53,54,55,56,81,82,83,84,89,90,93,94,97,99,102,],[-64,21,-15,-14,-16,-13,-17,-40,-57,-37,-58,-52,-56,-36,-48,-55,-56,-47,-39,-63,98,-35,-51,-59,-38,-62,]),'INT':([0,2,4,5,6,9,11,13,21,26,27,29,30,31,35,48,],[7,-3,7,-4,-5,-2,7,-6,7,-10,-64,-7,-20,7,-19,-18,]),'LBRACKET':([10,23,37,51,],[12,28,12,76,]),'TIMES':([41,51,52,53,54,56,81,82,83,94,97,99,],[-57,-37,-58,-52,-56,80,-55,-56,80,-51,-59,-38,]),'SEMICOLON':([10,13,24,27,29,30,31,33,35,36,37,38,40,41,42,44,46,47,48,49,50,51,52,53,54,55,56,57,58,70,72,73,81,82,83,84,86,93,94,95,96,97,99,100,101,103,104,],[13,-6,29,-64,-7,-20,-64,-22,-19,57,13,-23,-40,-57,70,73,-27,-21,-18,-25,-24,-37,-58,-52,-56,-36,-48,-29,-26,-28,86,-33,-55,-56,-47,-39,-34,-35,-51,57,57,-59,-38,-30,-32,57,-31,]),'RBRACE':([13,27,29,30,31,33,35,36,38,46,47,48,49,50,57,58,70,73,86,100,101,104,],[-6,-64,-7,-20,-64,-22,-19,48,-23,-27,-21,-18,-25,-24,-29,-26,-28,-33,-34,-30,-32,-31,]),'DIVIDE':([41,51,52,53,54,56,81,82,83,94,97,99,],[-57,-37,-58,-52,-56,78,-55,-56,78,-51,-59,-38,]),'VOID':([0,2,4,5,6,9,11,13,21,26,27,29,30,31,35,48,],[1,-3,1,-4,-5,-2,15,-6,1,-10,-64,-7,-20,1,-19,-18,]),'PLUS':([40,41,51,52,53,54,56,81,82,83,84,94,97,99,],[67,-57,-37,-58,-52,-56,-48,-55,-56,-47,67,-51,-59,-38,]),'ID':([1,7,8,13,15,19,27,29,30,31,33,34,35,36,38,39,44,46,47,48,49,50,57,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,86,95,96,98,100,101,103,104,],[-9,-8,10,-6,-9,23,-64,-7,-20,-64,-22,37,-19,51,-23,51,51,-27,-21,-18,-25,-24,-29,-26,-45,-43,-41,51,-42,-46,-44,-49,51,-50,-28,51,-33,51,51,51,51,-54,51,-53,-34,51,51,51,-30,-32,51,-31,]),'ASSIGN':([51,54,99,],[-37,77,-38,]),'LESS':([40,41,51,52,53,54,56,81,82,83,94,97,99,],[62,-57,-37,-58,-52,-56,-48,-55,-56,-47,-51,-59,-38,]),'NUMBER':([12,13,27,29,30,31,33,35,36,38,39,44,46,47,48,49,50,57,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,86,95,96,98,100,101,103,104,],[20,-6,-64,-7,-20,-64,-22,-19,52,-23,52,52,-27,-21,-18,-25,-24,-29,-26,-45,-43,-41,52,-42,-46,-44,-49,52,-50,-28,52,-33,52,52,52,52,-54,52,-53,-34,52,52,52,-30,-32,52,-31,]),'LESSEQUAL':([40,41,51,52,53,54,56,81,82,83,94,97,99,],[64,-57,-37,-58,-52,-56,-48,-55,-56,-47,-51,-59,-38,]),'RPAREN':([11,14,15,16,17,18,23,25,32,40,41,51,52,53,54,55,56,59,75,81,82,83,84,85,87,88,89,90,91,93,94,97,99,102,],[-64,-11,-12,-15,22,-14,-16,-13,-17,-40,-57,-37,-58,-52,-56,-36,-48,81,-64,-55,-56,-47,-39,95,96,97,-63,-60,-61,-35,-51,-59,-38,-62,]),'GREATEREQUAL':([40,41,51,52,53,54,56,81,82,83,94,97,99,],[66,-57,-37,-58,-52,-56,-48,-55,-56,-47,-51,-59,-38,]),'RBRACKET':([20,28,40,41,51,52,53,54,55,56,81,82,83,84,92,93,94,97,99,],[24,32,-40,-57,-37,-58,-52,-56,-36,-48,-55,-56,-47,-39,99,-35,-51,-59,-38,]),'LBRACE':([13,22,27,29,30,31,33,35,36,38,46,47,48,49,50,57,58,70,73,86,95,96,100,101,103,104,],[-6,27,-64,-7,-20,-64,-22,-19,27,-23,-27,-21,-18,-25,-24,-29,-26,-28,-33,-34,27,27,-30,-32,27,-31,]),'ELSE':([38,46,48,49,50,57,58,70,73,86,100,101,104,],[-23,-27,-18,-25,-24,-29,-26,-28,-33,-34,103,-32,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'param_list':([11,],[14,]),'expression_stmt':([36,95,96,103,],[38,38,38,38,]),'args':([75,],[88,]),'additive_expression':([36,39,44,68,71,74,75,76,77,95,96,98,103,],[40,40,40,84,40,40,40,40,40,40,40,40,40,]),'call':([36,39,44,63,68,71,74,75,76,77,79,95,96,98,103,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'program':([0,],[3,]),'declaration_list':([0,],[4,]),'args_list':([75,],[90,]),'empty':([11,27,31,75,],[16,30,33,91,]),'params':([11,],[17,]),'mulop':([56,83,],[79,79,]),'return_stmt':([36,95,96,103,],[46,46,46,46,]),'term':([36,39,44,63,68,71,74,75,76,77,95,96,98,103,],[56,56,56,83,56,56,56,56,56,56,56,56,56,56,]),'param':([11,21,],[18,25,]),'var_declaration':([0,4,31,],[5,5,35,]),'statement':([36,95,96,103,],[47,100,101,104,]),'selection_stmt':([36,95,96,103,],[49,49,49,49,]),'compound_stmt':([22,36,95,96,103,],[26,50,50,50,50,]),'declaration':([0,4,],[2,9,]),'relop':([40,],[68,]),'factor':([36,39,44,63,68,71,74,75,76,77,79,95,96,98,103,],[53,53,53,53,53,53,53,53,53,53,94,53,53,53,53,]),'fun_declaration':([0,4,],[6,6,]),'var':([36,39,44,63,68,71,74,75,76,77,79,95,96,98,103,],[54,54,54,82,82,54,54,54,54,54,82,54,54,54,54,]),'simple_expression':([36,39,44,71,74,75,76,77,95,96,98,103,],[55,55,55,55,55,55,55,55,55,55,55,55,]),'addop':([40,84,],[63,63,]),'type_specifier':([0,4,11,21,31,],[8,8,19,19,34,]),'iteration_stmt':([36,95,96,103,],[58,58,58,58,]),'expression':([36,39,44,71,74,75,76,77,95,96,98,103,],[42,59,72,85,87,89,92,93,42,42,102,42,]),'local_declarations':([27,],[31,]),'statement_list':([31,],[36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','cminus_parser.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','cminus_parser.py',13),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list2','cminus_parser.py',18),
  ('declaration -> var_declaration','declaration',1,'p_declaration','cminus_parser.py',22),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','cminus_parser.py',23),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration_1','cminus_parser.py',26),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','cminus_parser.py',30),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','cminus_parser.py',34),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','cminus_parser.py',38),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','cminus_parser.py',42),
  ('params -> param_list','params',1,'p_params_1','cminus_parser.py',46),
  ('params -> VOID','params',1,'p_params_2','cminus_parser.py',50),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','cminus_parser.py',54),
  ('param_list -> param','param_list',1,'p_param_list_2','cminus_parser.py',58),
  ('param_list -> empty','param_list',1,'p_param_list_3','cminus_parser.py',62),
  ('param -> type_specifier ID','param',2,'p_param_1','cminus_parser.py',66),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','cminus_parser.py',70),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','cminus_parser.py',74),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','cminus_parser.py',78),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','cminus_parser.py',82),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','cminus_parser.py',86),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','cminus_parser.py',90),
  ('statement -> expression_stmt','statement',1,'p_statement','cminus_parser.py',94),
  ('statement -> compound_stmt','statement',1,'p_statement','cminus_parser.py',95),
  ('statement -> selection_stmt','statement',1,'p_statement','cminus_parser.py',96),
  ('statement -> iteration_stmt','statement',1,'p_statement','cminus_parser.py',97),
  ('statement -> return_stmt','statement',1,'p_statement','cminus_parser.py',98),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','cminus_parser.py',103),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','cminus_parser.py',107),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','cminus_parser.py',111),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','cminus_parser.py',115),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','cminus_parser.py',119),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','cminus_parser.py',123),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','cminus_parser.py',127),
  ('expression -> var ASSIGN expression','expression',3,'p_expression_1','cminus_parser.py',131),
  ('expression -> simple_expression','expression',1,'p_expression_2','cminus_parser.py',135),
  ('var -> ID','var',1,'p_var_1','cminus_parser.py',139),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','cminus_parser.py',143),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','cminus_parser.py',147),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','cminus_parser.py',151),
  ('relop -> LESS','relop',1,'p_relop','cminus_parser.py',155),
  ('relop -> LESSEQUAL','relop',1,'p_relop','cminus_parser.py',156),
  ('relop -> GREATER','relop',1,'p_relop','cminus_parser.py',157),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','cminus_parser.py',158),
  ('relop -> EQUAL','relop',1,'p_relop','cminus_parser.py',159),
  ('relop -> NEQUAL','relop',1,'p_relop','cminus_parser.py',160),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','cminus_parser.py',165),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','cminus_parser.py',169),
  ('addop -> PLUS','addop',1,'p_addop','cminus_parser.py',173),
  ('addop -> MINUS','addop',1,'p_addop','cminus_parser.py',174),
  ('term -> term mulop factor','term',3,'p_term_1','cminus_parser.py',179),
  ('term -> factor','term',1,'p_term_2','cminus_parser.py',183),
  ('mulop -> TIMES','mulop',1,'p_mulop','cminus_parser.py',187),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','cminus_parser.py',188),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','cminus_parser.py',193),
  ('factor -> var','factor',1,'p_factor_2','cminus_parser.py',197),
  ('factor -> call','factor',1,'p_factor_3','cminus_parser.py',201),
  ('factor -> NUMBER','factor',1,'p_factor_4','cminus_parser.py',205),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','cminus_parser.py',209),
  ('args -> args_list','args',1,'p_args','cminus_parser.py',213),
  ('args -> empty','args',1,'p_args','cminus_parser.py',214),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','cminus_parser.py',219),
  ('args_list -> expression','args_list',1,'p_args_list_2','cminus_parser.py',223),
  ('empty -> <empty>','empty',0,'p_empty','cminus_parser.py',227),
]
